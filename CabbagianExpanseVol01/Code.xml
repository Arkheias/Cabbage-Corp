<?xml version="1.0" ?>
<TranscendenceModule>
	 
<!--
	TECH LEVELS

	  1		Personal (most humans can create/repair)
	 2-3	Manufacturing (requires dedicated machines/devices)
	 4-5	High-tech (requires special knowledge and/or sophisticated infrastructure)
	 6-7	Restricted (technology available only to governments/corporations)
	 8-9	Experimental (basic concepts understood; limited practice)
	10-14	High Races (technology only available to Galactics)
	15-20	Halo Races (technology only available to Ancients in globular clusters)
	21-25	Hierodule (technology only available to hierodules)
	
	26-50	Core Minds (technology only known to Core Minds)
	 >50	Unknown (impossible or not known to be physically possible)
-->

<!-- ======================================================================= -->
						<!-- Cabbage Corp Globals -->							
<!-- ======================================================================= -->
	 

<Globals>
	(block Nil
		(setq CCDeviceExchange 
			(lambda (gReplacement)
				(block (currentFuel newDevice baseFuel)
					(setq currentFuel (shpGetFuelLeft gSource))
					(setq newDevice (itmCreate gReplacement 1))
					
					; copy enhancements from old itemstruct to new itemstruct
					(if (itmIsEnhanced gItem)
						(setq newDevice (itmSetEnhanced newDevice (itmIsEnhanced gItem)))
					)
					
					(shpRemoveDevice gSource gItem)
					(objRemoveItem gSource (itmSetProperty gItem 'installed Nil) 1)
					
					(objAddItem gSource newDevice)
					(shpInstallDevice gSource newDevice)
					
					; reactors refuel upon installation, this removes the extra fuel
					; the replacement reactor should have the same fuel capacity as the original
					(setq baseFuel (shpGetFuelLeft gSource))
					(shpConsumeFuel gSource (multiply (subtract currentFuel baseFuel) -1))
				)
			)
		)
		
		(setq intBuyModifiedItems 
			(lambda (itemCount itemCost)
				(block (itemMult itemsToBuy)
					(setq itemsToBuy (itmCreate (itmGetType (scrGetItem gSCreen)) itemCount))
					(objRemoveItem gSource gBaseItem 
						(multiply itemCount 
							(block Nil
								; for every item in the CCBuyAndModifyArray
								(for counter 0	(subtract (count (itmGetStaticData gBaseItem 'CCBuyAndModify)) 1)
								
									; if the current item from the array matches the item being purchased then
									(if (eq (itmGetType (scrGetItem gScreen)) (@ (@ (itmGetStaticData gBaseItem 'CCBuyAndModify) counter) 'Product))
									
									
										; set the itemMult equal to the base items required to build the new item
										(setq itemMult (@ (@ (itmGetStaticData gBaseItem 'CCBuyAndModify) counter) 'count))
									)
								)
								itemMult
							)
						)
					)
					(rpgBuyItem gSource itemsToBuy (multiply itemCount itemCost) (objGetDefaultCurrency gSource))
				)
			)
		)
		
		(setq intCabbageGetFuelEfficiency 
			(lambda (spaceObj)
				(block (reactor)
					(setq reactor (@ (objGetItems spaceObj "rI") 0))
					
					; if no reactor is installed, default fuel efficienc defaults to 15
					(If (not reactor)
						15
						(typGetDataField (itmGetType reactor) "fuelEfficiency")
					)
				)
			)
		)
		
		(setq intCabbageShpConsumePower 
			(lambda (spaceObj fuelAmount)
				(block (reactor)
					(setq reactor (@ (objGetItems spaceObj "rI") 0))
					(shpConsumeFuel gSource (divide (multiply fuelAmount 100)
					
						; if no reactor is installed, default fuel efficienc defaults to 15
						(If (not reactor)
							15
							(typGetDataField (itmGetType reactor) "fuelEfficiency")
						)
					))
				)
			)
		)
		
		(setq intCabbageCorpCrime 
			(lambda (severity description)
				(if (gr severity (int (objGetData gPlayerShip "CCCrimeSeverity")))
					(block Nil
						(objSetData gPlayerShip "CCCrimeSeverity" severity)
						(objSetData gPlayerShip "CCCrime" description)
					)
				)
			)
		)
		
		(setq intCabbageCorpOnDestroy 
			(lambda Nil
				(block (CCKraken theDestroyer)
					; Destroy items on the station
					(intDestroyItems gSource)

					; Create a Cabbage Corp Kraken to avenge the station
					(setq CCKraken
						(sysCreateShip &scCCCheopsNPC; (objGetNearestStargate gSource) &svCCCabbageCorp;)
					)

					; If someone destroyed the station, avenge
					(setq theDestroyer aOrderGiver)
					(if (and theDestroyer
							(objCanAttack theDestroyer)
							(not (eq (objGetSovereign theDestroyer) &svCCCabbageCorp;))
						)
						(block Nil
							(objSendMessage gPlayerShip gSource "Security alert! Release the Kraken!")
							(shpOrderAttack CCKraken theDestroyer)

							; Since the cruiser is busy, deploy some transports to loot the station
							(for i 1 (random 1 3)
								(block (transport)
									(setq transport
										(sysCreateShip &scCCLorryNPC; (objGetNearestStargate gSource) &svCCCabbageCorp;)
									)

									(shpOrderLoot transport gSource)
									(shpOrderGate transport)
								)
							)
						)
					)

					; If the player destroyed the station, then she is banned
					(if (and gPlayerShip (eq aOrderGiver gPlayerShip))
						(intCabbageCorpCrime 3 (cat "the destruction of a " (objGetName gSource 4)))
					)

					; Take all the items from the station (so that others won't loot it)
					(shpOrderLoot CCKraken gSource)

					; Gate out
					(shpOrderGate CCKraken)
				)
			)
		)
		
		(setq CCAsteroidScanner
			(lambda (gRange)
				(if (and	(eq gSource gPlayerShip)		;continues if this event is being run from the playership, if the item is installed and if it is also active
							(itmIsInstalled gItem) 
							(objIsDeviceEnabled gsource gItem)
					)
					(block (gAsteroids)
						(switch
							(eq gRange 1)
								(setq gAsteroids 												;variable that contains the list of viable asteroids defined in the following lines
									(filter	(sysFindObject gSource "t +asteroid; N:1;")			;list to be filtered (stations that are asteroids and within specified range)
											asteroid											;arbitrary placeholder in the following function for each item from the previously defined list
											(gr (count (objGetItems asteroid "t +Ore;")) 0)		;function to filter the list (asteroids that still contain ore)
									)
								)
							(eq gRange 2)														;I can't directly pass the range value into the criteria, so I make it check for each range up to 50 light-seconds
								(setq gAsteroids												;I had to use the same workaround for the refinery devices
									(filter	(sysFindObject gSource "t +asteroid; N:2;")			;If there is some specific format for "N:gRange;" that works, I ain't found it yet.
											asteroid
											(gr (count (objGetItems asteroid "t +Ore;")) 0)
									)
								)
							(eq gRange 3)
								(setq gAsteroids (filter (sysFindObject gSource "t +asteroid; N:3;") asteroid (gr (count (objGetItems asteroid "t +Ore;")) 0)))
							(eq gRange 4)
								(setq gAsteroids (filter (sysFindObject gSource "t +asteroid; N:4;") asteroid (gr (count (objGetItems asteroid "t +Ore;")) 0)))
							(eq gRange 5)
								(setq gAsteroids (filter (sysFindObject gSource "t +asteroid; N:5;") asteroid (gr (count (objGetItems asteroid "t +Ore;")) 0)))
							(eq gRange 6)
								(setq gAsteroids (filter (sysFindObject gSource "t +asteroid; N:6;") asteroid (gr (count (objGetItems asteroid "t +Ore;")) 0)))
							(eq gRange 7)
								(setq gAsteroids (filter (sysFindObject gSource "t +asteroid; N:7;") asteroid (gr (count (objGetItems asteroid "t +Ore;")) 0)))
							(eq gRange 8)
								(setq gAsteroids (filter (sysFindObject gSource "t +asteroid; N:8;") asteroid (gr (count (objGetItems asteroid "t +Ore;")) 0)))
							(eq gRange 9)
								(setq gAsteroids (filter (sysFindObject gSource "t +asteroid; N:9;") asteroid (gr (count (objGetItems asteroid "t +Ore;")) 0)))
							(eq gRange 10)
								(setq gAsteroids (filter (sysFindObject gSource "t +asteroid; N:10;") asteroid (gr (count (objGetItems asteroid "t +Ore;")) 0)))
							(eq gRange 11)
								(setq gAsteroids (filter (sysFindObject gSource "t +asteroid; N:11;") asteroid (gr (count (objGetItems asteroid "t +Ore;")) 0)))
							(eq gRange 12)
								(setq gAsteroids (filter (sysFindObject gSource "t +asteroid; N:12;") asteroid (gr (count (objGetItems asteroid "t +Ore;")) 0)))
							(eq gRange 13)
								(setq gAsteroids (filter (sysFindObject gSource "t +asteroid; N:13;") asteroid (gr (count (objGetItems asteroid "t +Ore;")) 0)))
							(eq gRange 14)
								(setq gAsteroids (filter (sysFindObject gSource "t +asteroid; N:14;") asteroid (gr (count (objGetItems asteroid "t +Ore;")) 0)))
							(eq gRange 15)
								(setq gAsteroids (filter (sysFindObject gSource "t +asteroid; N:15;") asteroid (gr (count (objGetItems asteroid "t +Ore;")) 0)))
							(eq gRange 16)
								(setq gAsteroids (filter (sysFindObject gSource "t +asteroid; N:16;") asteroid (gr (count (objGetItems asteroid "t +Ore;")) 0)))
							(eq gRange 17)
								(setq gAsteroids (filter (sysFindObject gSource "t +asteroid; N:17;") asteroid (gr (count (objGetItems asteroid "t +Ore;")) 0)))
							(eq gRange 18)
								(setq gAsteroids (filter (sysFindObject gSource "t +asteroid; N:18;") asteroid (gr (count (objGetItems asteroid "t +Ore;")) 0)))
							(eq gRange 19)
								(setq gAsteroids (filter (sysFindObject gSource "t +asteroid; N:19;") asteroid (gr (count (objGetItems asteroid "t +Ore;")) 0)))
							(eq gRange 20)
								(setq gAsteroids (filter (sysFindObject gSource "t +asteroid; N:20;") asteroid (gr (count (objGetItems asteroid "t +Ore;")) 0)))
							(eq gRange 21)
								(setq gAsteroids (filter (sysFindObject gSource "t +asteroid; N:21;") asteroid (gr (count (objGetItems asteroid "t +Ore;")) 0)))
							(eq gRange 22)
								(setq gAsteroids (filter (sysFindObject gSource "t +asteroid; N:22;") asteroid (gr (count (objGetItems asteroid "t +Ore;")) 0)))
							(eq gRange 23)
								(setq gAsteroids (filter (sysFindObject gSource "t +asteroid; N:23;") asteroid (gr (count (objGetItems asteroid "t +Ore;")) 0)))
							(eq gRange 24)
								(setq gAsteroids (filter (sysFindObject gSource "t +asteroid; N:24;") asteroid (gr (count (objGetItems asteroid "t +Ore;")) 0)))
							(eq gRange 25)
								(setq gAsteroids (filter (sysFindObject gSource "t +asteroid; N:25;") asteroid (gr (count (objGetItems asteroid "t +Ore;")) 0)))
							(eq gRange 26)
								(setq gAsteroids (filter (sysFindObject gSource "t +asteroid; N:26;") asteroid (gr (count (objGetItems asteroid "t +Ore;")) 0)))
							(eq gRange 27)
								(setq gAsteroids (filter (sysFindObject gSource "t +asteroid; N:27;") asteroid (gr (count (objGetItems asteroid "t +Ore;")) 0)))
							(eq gRange 28)
								(setq gAsteroids (filter (sysFindObject gSource "t +asteroid; N:28;") asteroid (gr (count (objGetItems asteroid "t +Ore;")) 0)))
							(eq gRange 29)
								(setq gAsteroids (filter (sysFindObject gSource "t +asteroid; N:29;") asteroid (gr (count (objGetItems asteroid "t +Ore;")) 0)))
							(eq gRange 30)
								(setq gAsteroids (filter (sysFindObject gSource "t +asteroid; N:30;") asteroid (gr (count (objGetItems asteroid "t +Ore;")) 0)))
							(eq gRange 31)
								(setq gAsteroids (filter (sysFindObject gSource "t +asteroid; N:31;") asteroid (gr (count (objGetItems asteroid "t +Ore;")) 0)))
							(eq gRange 32)
								(setq gAsteroids (filter (sysFindObject gSource "t +asteroid; N:32;") asteroid (gr (count (objGetItems asteroid "t +Ore;")) 0)))
							(eq gRange 33)
								(setq gAsteroids (filter (sysFindObject gSource "t +asteroid; N:33;") asteroid (gr (count (objGetItems asteroid "t +Ore;")) 0)))
							(eq gRange 34)
								(setq gAsteroids (filter (sysFindObject gSource "t +asteroid; N:34;") asteroid (gr (count (objGetItems asteroid "t +Ore;")) 0)))
							(eq gRange 35)
								(setq gAsteroids (filter (sysFindObject gSource "t +asteroid; N:35;") asteroid (gr (count (objGetItems asteroid "t +Ore;")) 0)))
							(eq gRange 36)
								(setq gAsteroids (filter (sysFindObject gSource "t +asteroid; N:36;") asteroid (gr (count (objGetItems asteroid "t +Ore;")) 0)))
							(eq gRange 37)
								(setq gAsteroids (filter (sysFindObject gSource "t +asteroid; N:37;") asteroid (gr (count (objGetItems asteroid "t +Ore;")) 0)))
							(eq gRange 38)
								(setq gAsteroids (filter (sysFindObject gSource "t +asteroid; N:38;") asteroid (gr (count (objGetItems asteroid "t +Ore;")) 0)))
							(eq gRange 39)
								(setq gAsteroids (filter (sysFindObject gSource "t +asteroid; N:39;") asteroid (gr (count (objGetItems asteroid "t +Ore;")) 0)))
							(eq gRange 40)
								(setq gAsteroids (filter (sysFindObject gSource "t +asteroid; N:40;") asteroid (gr (count (objGetItems asteroid "t +Ore;")) 0)))
							(eq gRange 41)
								(setq gAsteroids (filter (sysFindObject gSource "t +asteroid; N:41;") asteroid (gr (count (objGetItems asteroid "t +Ore;")) 0)))
							(eq gRange 42)
								(setq gAsteroids (filter (sysFindObject gSource "t +asteroid; N:42;") asteroid (gr (count (objGetItems asteroid "t +Ore;")) 0)))
							(eq gRange 43)
								(setq gAsteroids (filter (sysFindObject gSource "t +asteroid; N:43;") asteroid (gr (count (objGetItems asteroid "t +Ore;")) 0)))
							(eq gRange 44)
								(setq gAsteroids (filter (sysFindObject gSource "t +asteroid; N:44;") asteroid (gr (count (objGetItems asteroid "t +Ore;")) 0)))
							(eq gRange 45)
								(setq gAsteroids (filter (sysFindObject gSource "t +asteroid; N:45;") asteroid (gr (count (objGetItems asteroid "t +Ore;")) 0)))
							(eq gRange 46)
								(setq gAsteroids (filter (sysFindObject gSource "t +asteroid; N:46;") asteroid (gr (count (objGetItems asteroid "t +Ore;")) 0)))
							(eq gRange 47)
								(setq gAsteroids (filter (sysFindObject gSource "t +asteroid; N:47;") asteroid (gr (count (objGetItems asteroid "t +Ore;")) 0)))
							(eq gRange 48)
								(setq gAsteroids (filter (sysFindObject gSource "t +asteroid; N:48;") asteroid (gr (count (objGetItems asteroid "t +Ore;")) 0)))
							(eq gRange 49)
								(setq gAsteroids (filter (sysFindObject gSource "t +asteroid; N:49;") asteroid (gr (count (objGetItems asteroid "t +Ore;")) 0)))
							(eq gRange 50)
								(setq gAsteroids (filter (sysFindObject gSource "t +asteroid; N:50;") asteroid (gr (count (objGetItems asteroid "t +Ore;")) 0)))
						)
						(if (gr (count gAsteroids) 0)												;continues if there was at least one asteroid that contains ore
							(enum	gAsteroids 														;list of items to which the following function will be applied
									spaceObj														;arbitrary placeholder in the following function for each item from the previously defined list
									(sysCreateEffect &efCCOreMarker; spaceObj (objGetPos spaceObj))	;creates this effect as if the object called up the effect, and at the position of the object
							)
						)
					)
				)
			)
		)
		
		(setq CCMicrosaurScanner
			(lambda (gRange)
				(if (and	(eq gSource gPlayerShip)		;continues if this event is being run from the playership, if the item is installed and if it is also active
							(itmIsInstalled gItem) 
							(objIsDeviceEnabled gsource gItem)
					)
					(block (gContainers)
						(switch
							(eq gRange 1)
								(setq gContainers 												;variable that contains the list of viable asteroids defined in the following lines
									(filter	(sysFindObject gSource "t +unid:0x00004033;")			;list to be filtered (stations that are asteroids and within specified range)
											container											;arbitrary placeholder in the following function for each item from the previously defined list
											(gr (count (objGetItems container "t +Ore;")) 0)		;function to filter the list (asteroids that still contain ore)
									)
								)
							(eq gRange 2)														;I can't directly pass the range value into the criteria, so I make it check for each range up to 50 light-seconds
								(setq gContainers												;I had to use the same workaround for the refinery devices
									(filter	(sysFindObject gSource "t +unid:0x00004033;")			;If there is some specific format for "N:gRange;" that works, I ain't found it yet.
											container
											(gr (count (objGetItems container "t +Ore;")) 0)
									)
								)
							(eq gRange 3)
								(setq gContainers (filter (sysFindObject gSource "t; N:3;") container (gr (count (objGetItems container "t +unid:0x00004033;")) 0)))
							(eq gRange 4)
								(setq gContainers (filter (sysFindObject gSource "t; N:4;") container (gr (count (objGetItems container "t +unid:0x00004033;")) 0)))
							(eq gRange 5)
								(setq gContainers (filter (sysFindObject gSource "t; N:5;") container (gr (count (objGetItems container "t +unid:0x00004033;")) 0)))
							(eq gRange 6)
								(setq gContainers (filter (sysFindObject gSource "t; N:6;") container (gr (count (objGetItems container "t +unid:0x00004033;")) 0)))
							(eq gRange 7)
								(setq gContainers (filter (sysFindObject gSource "t; N:7;") container (gr (count (objGetItems container "t +unid:0x00004033;")) 0)))
							(eq gRange 8)
								(setq gContainers (filter (sysFindObject gSource "t; N:8;") container (gr (count (objGetItems container "t +unid:0x00004033;")) 0)))
							(eq gRange 9)
								(setq gContainers (filter (sysFindObject gSource "t; N:9;") container (gr (count (objGetItems container "t +unid:0x00004033;")) 0)))
							(eq gRange 10)
								(setq gContainers (filter (sysFindObject gSource "t; N:10;") container (gr (count (objGetItems container "t +unid:0x00004033;")) 0)))
							(eq gRange 11)
								(setq gContainers (filter (sysFindObject gSource "t; N:11;") container (gr (count (objGetItems container "t +unid:0x00004033;")) 0)))
							(eq gRange 12)
								(setq gContainers (filter (sysFindObject gSource "t; N:12;") container (gr (count (objGetItems container "t +unid:0x00004033;")) 0)))
							(eq gRange 13)
								(setq gContainers (filter (sysFindObject gSource "t; N:13;") container (gr (count (objGetItems container "t +unid:0x00004033;")) 0)))
							(eq gRange 14)
								(setq gContainers (filter (sysFindObject gSource "t; N:14;") container (gr (count (objGetItems container "t +unid:0x00004033;")) 0)))
							(eq gRange 15)
								(setq gContainers (filter (sysFindObject gSource "t; N:15;") container (gr (count (objGetItems container "t +unid:0x00004033;")) 0)))
							(eq gRange 16)
								(setq gContainers (filter (sysFindObject gSource "t; N:16;") container (gr (count (objGetItems container "t +unid:0x00004033;")) 0)))
							(eq gRange 17)
								(setq gContainers (filter (sysFindObject gSource "t; N:17;") container (gr (count (objGetItems container "t +unid:0x00004033;")) 0)))
							(eq gRange 18)
								(setq gContainers (filter (sysFindObject gSource "t; N:18;") container (gr (count (objGetItems container "t +unid:0x00004033;")) 0)))
							(eq gRange 19)
								(setq gContainers (filter (sysFindObject gSource "t; N:19;") container (gr (count (objGetItems container "t +unid:0x00004033;")) 0)))
							(eq gRange 20)
								(setq gContainers (filter (sysFindObject gSource "t; N:20;") container (gr (count (objGetItems container "t +unid:0x00004033;")) 0)))
							(eq gRange 21)
								(setq gContainers (filter (sysFindObject gSource "t; N:21;") container (gr (count (objGetItems container "t +unid:0x00004033;")) 0)))
							(eq gRange 22)
								(setq gContainers (filter (sysFindObject gSource "t; N:22;") container (gr (count (objGetItems container "t +unid:0x00004033;")) 0)))
							(eq gRange 23)
								(setq gContainers (filter (sysFindObject gSource "t; N:23;") container (gr (count (objGetItems container "t +unid:0x00004033;")) 0)))
							(eq gRange 24)
								(setq gContainers (filter (sysFindObject gSource "t; N:24;") container (gr (count (objGetItems container "t +unid:0x00004033;")) 0)))
							(eq gRange 25)
								(setq gContainers (filter (sysFindObject gSource "t; N:25;") container (gr (count (objGetItems container "t +unid:0x00004033;")) 0)))
							(eq gRange 26)
								(setq gContainers (filter (sysFindObject gSource "t; N:26;") container (gr (count (objGetItems container "t +unid:0x00004033;")) 0)))
							(eq gRange 27)
								(setq gContainers (filter (sysFindObject gSource "t; N:27;") container (gr (count (objGetItems container "t +unid:0x00004033;")) 0)))
							(eq gRange 28)
								(setq gContainers (filter (sysFindObject gSource "t; N:28;") container (gr (count (objGetItems container "t +unid:0x00004033;")) 0)))
							(eq gRange 29)
								(setq gContainers (filter (sysFindObject gSource "t; N:29;") container (gr (count (objGetItems container "t +unid:0x00004033;")) 0)))
							(eq gRange 30)
								(setq gContainers (filter (sysFindObject gSource "t; N:30;") container (gr (count (objGetItems container "t +unid:0x00004033;")) 0)))
							(eq gRange 31)
								(setq gContainers (filter (sysFindObject gSource "t; N:31;") container (gr (count (objGetItems container "t +unid:0x00004033;")) 0)))
							(eq gRange 32)
								(setq gContainers (filter (sysFindObject gSource "t; N:32;") container (gr (count (objGetItems container "t +unid:0x00004033;")) 0)))
							(eq gRange 33)
								(setq gContainers (filter (sysFindObject gSource "t; N:33;") container (gr (count (objGetItems container "t +unid:0x00004033;")) 0)))
							(eq gRange 34)
								(setq gContainers (filter (sysFindObject gSource "t; N:34;") container (gr (count (objGetItems container "t +unid:0x00004033;")) 0)))
							(eq gRange 35)
								(setq gContainers (filter (sysFindObject gSource "t; N:35;") container (gr (count (objGetItems container "t +unid:0x00004033;")) 0)))
							(eq gRange 36)
								(setq gContainers (filter (sysFindObject gSource "t; N:36;") container (gr (count (objGetItems container "t +unid:0x00004033;")) 0)))
							(eq gRange 37)
								(setq gContainers (filter (sysFindObject gSource "t; N:37;") container (gr (count (objGetItems container "t +unid:0x00004033;")) 0)))
							(eq gRange 38)
								(setq gContainers (filter (sysFindObject gSource "t; N:38;") container (gr (count (objGetItems container "t +unid:0x00004033;")) 0)))
							(eq gRange 39)
								(setq gContainers (filter (sysFindObject gSource "t; N:39;") container (gr (count (objGetItems container "t +unid:0x00004033;")) 0)))
							(eq gRange 40)
								(setq gContainers (filter (sysFindObject gSource "t; N:40;") container (gr (count (objGetItems container "t +unid:0x00004033;")) 0)))
							(eq gRange 41)
								(setq gContainers (filter (sysFindObject gSource "t; N:41;") container (gr (count (objGetItems container "t +unid:0x00004033;")) 0)))
							(eq gRange 42)
								(setq gContainers (filter (sysFindObject gSource "t; N:42;") container (gr (count (objGetItems container "t +unid:0x00004033;")) 0)))
							(eq gRange 43)
								(setq gContainers (filter (sysFindObject gSource "t; N:43;") container (gr (count (objGetItems container "t +unid:0x00004033;")) 0)))
							(eq gRange 44)
								(setq gContainers (filter (sysFindObject gSource "t; N:44;") container (gr (count (objGetItems container "t +unid:0x00004033;")) 0)))
							(eq gRange 45)
								(setq gContainers (filter (sysFindObject gSource "t; N:45;") container (gr (count (objGetItems container "t +unid:0x00004033;")) 0)))
							(eq gRange 46)
								(setq gContainers (filter (sysFindObject gSource "t; N:46;") container (gr (count (objGetItems container "t +unid:0x00004033;")) 0)))
							(eq gRange 47)
								(setq gContainers (filter (sysFindObject gSource "t; N:47;") container (gr (count (objGetItems container "t +unid:0x00004033;")) 0)))
							(eq gRange 48)
								(setq gContainers (filter (sysFindObject gSource "t; N:48;") container (gr (count (objGetItems container "t +unid:0x00004033;")) 0)))
							(eq gRange 49)
								(setq gContainers (filter (sysFindObject gSource "t; N:49;") container (gr (count (objGetItems container "t +unid:0x00004033;")) 0)))
							(eq gRange 50)
								(setq gContainers (filter (sysFindObject gSource "t; N:50;") container (gr (count (objGetItems container "t +unid:0x00004033;")) 0)))
						)
						(if (gr (count gContainers) 0)														;continues if there was at least one asteroid that contains ore
							(enum	gContainers 															;list of items to which the following function will be applied
									spaceObj																;arbitrary placeholder in the following function for each item from the previously defined list
									(sysCreateEffect &efCCMicrosaurMarker; spaceObj (objGetPos spaceObj))	;creates this effect as if the object called up the effect, and at the position of the object
							)
						)
					)
				)
			)
		)
		
		(setq CCMicrosaurScanObj (lambda (asteroidObj podType)
				(block (
					(podOreCriteria (typGetStaticData podType 'oreCriteria))
					(oreCriteria (if podOreCriteria podOreCriteria "t +unid:0x00004033;"))
					oreFound
					)
					
					(switch
						; If there are no detectable Microsaurs here, nothing to do
						(not (setq oreFound (objGetItems asteroidObj oreCriteria)))
							Nil
							
						; If we already have this overlay, then nothing to do
						(filter (objGetOverlays asteroidObj) theOverlay
								(= (objGetOverlayType asteroidObj theOverlay) &ovCCMicrosaurDetectionCount;)
								)
							Nil
							
						; Otherwise, create an overlay
						(block (
							overlayID
							)
							
							(setq overlayID (objAddOverlay asteroidObj &ovCCMicrosaurDetectionCount;))
							(objSetOverlayProperty asteroidObj overlayID 'counterLabel (typTranslate &ovCCMicrosaurDetectionCount; 'msgScanning))
							
							; Return TRUE to indicate that we found ore
							True
							)
						)
					)
				))
		(setq CCUseReplacementCoil
			(lambda (theItem theDevice)
				(block (needsRepair resultText)
					(setq needsRepair (itmGetProperty aItemToRepair 'damaged))
					
					(if needsRepair
						(block (damagedCoils replacementCoils failureChance skillLevel)
							
							; Check if unknown item is compatible
							(if (not (objFireItemEvent gPlayership theItem "CanRepairItem"))
								(setq resultText "The superconducting coils were not compatible with your device, but you were able to successfully identify them.")
								
								(block Nil
									(setq skillLevel (typGetGlobalData &dsCCUseReplacementCoil; "skillLevel"))
									(setq damagedCoils
										(subtract
											(random 1 20)
											(divide (subtract skillLevel 10) 2)
										)
									)
									(setq replacementCoils (itmGetProperty theItem 'charges))

									; As skill level increases, the player's failure chance decreases
									(setq failureChance (divide (multiply damagedCoils 20) replacementCoils))

									; Do the repairs
									(if	(leq (random 1 100) failureChance)
										(if (eq (random 1 2) 1)
										
											; Sometimes we fail and destroy the device
											(block Nil
												(if (itmIsInstalled theDevice)
													(shpRemoveDevice gPlayerShip theDevice)
												)
												(objRemoveItem gPlayerShip (itmSetProperty theDevice 'installed Nil) 1)
												(setq resultText "Unfortunately, your attempt to repair the device has effectively destroyed it.")
											)
												
											; Sometimes we fail and destroy the replacement coils
											(block Nil
												(objRemoveItem gPlayerShip theItem 1)
												(setq resultText "Unfortunately, your attempt to repair the device was unsuccessful and the replacement coils were ruined in the process.")
												(setq replacementCoils 0)
											)
										)
										(block Nil
											(shpRepairItem gPlayerShip theDevice)
											(setq resultText
												(cat 
													"You have successfully repaired the damaged device"
												)
											)
											
											; Use up the item
											(if (and
													(geq skillLevel (random 1 12))
													(gr replacementCoils damagedCoils)
												)
												
												; Item is not entirely used up
												(block Nil
													(if (gr damagedCoils 0)
														(block Nil
															(objSetItemProperty gPlayership theItem 'charges (subtract replacementCoils damagedCoils))
															(setq resultText
																(cat
																	resultText
																	" using "
																	damagedCoils
																	" of the replacement coils."
																	"\n\n"
																	"Replacement coils Left: "
																	(subtract replacementCoils damagedCoils)
																)
															)
														)
														(setq resultText
															(cat
																resultText
																", by power cycling it."
																"\n\n"
																"Replacement coils Left: "
																(itmGetProperty theItem 'charges)
															)
														)
													)
												)
												
												; Item is entirely used up
												(block Nil
													(objSetItemProperty gPlayership theItem 'charges 0)
													(setq resultText
														(cat
															resultText
															" using all of the replacement coils."
														)
													)
												)
											)
												
											; Skill level increases
											(typIncGlobalData &dsCCUseReplacementCoil; "skillLevel" 1)
											(setq resultText
												(cat
													resultText
													"\n\n"
													"You feel more experienced at repairing emitter coils."
												)
											)
										)
									)
								)
							)
						)
						(setq resultText "That device is not damaged. There is no need to attempt repairs.")
					)

					resultText
				)
			)
		)
	)
</Globals>

<!--
	Add check for Cabbage Corp diplomatic immunity when being arrested for destroying stations, pay a fine instead of dying.
	Add check for cabbage corp premium membership at cabbage corp stations, buy a new identity and don't get arrested for having previously destroyed stations.
-->
	
</TranscendenceModule>