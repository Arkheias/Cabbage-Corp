<?xml version="1.0" encoding="utf-8"?>

<TranscendenceModule>

<!-- GLOBALS ===================================================================

	PREFIXES
	
	int			Internal functions (may change from version to version)
	math		General math functions
	obj			General object functions
	scr			General functions relating to dock screens
	str			General string functions
	sys			General functions relating to star systems
	
	TECH LEVELS
	
	  1		Personal (most humans can create/repair)
	 2-3	Manufacturing (requires dedicated machines/devices)
	 4-5	High-tech (requires special knowledge and/or sophisticated infrastructure)
	 6-7	Restricted (technology available only to governments/corporations)
	 8-9	Experimental (basic concepts understood; limited practice)
	10-14	High Races (technology only available to Galactics)
	15-20	Halo Races (technology only available to Ancients in globular clusters)
	21-25	Hierodule (technology only available to hierodules)
	
	26-50	Core Minds (technology only known to Core Minds)
	 >50	Unknown (impossible or not known to be physically possible)
	 
============================================================================ -->

<Globals>
	(block Nil
		(setq intModifyHardware 
			(lambda (newDeviceType)
				(block (baseFuel currentFuel newDevice )
					(setq currentFuel (shpGetFuelLeft gSource))
					
					; Initialize new device with same amount of charges as old device
					(setq newDevice
						(itmSetProperty (itmCreate newDeviceType 1) 'charges
								(itmGetProperty gItem 'charges)
							)
						)
					
					; copy enhancements from old itemstruct to new itemstruct
					(if (itmIsEnhanced gItem)
						(setq newDevice (itmSetEnhanced newDevice (itmIsEnhanced gItem)))
						)
					
					(shpRemoveDevice gSource gItem)
					(objRemoveItem gSource (itmSetProperty gItem 'installed Nil) 1)
					
					(objAddItem gSource newDevice)
					(shpInstallDevice gSource newDevice)
							
					; reactors refuel upon installation, this removes the extra fuel
					; swappable reactors must have the same fuel capacity as the original
					(setq baseFuel (shpGetFuelLeft gSource))
					(shpConsumeFuel gSource (multiply (subtract currentFuel baseFuel) -1))
					)
				)
			)
		
		(setq intBuyModifiedItems 
			(lambda (itemCount itemCost)
				(block (itemMult itemsToBuy)
					(setq itemsToBuy (itmCreate (itmGetType (scrGetItem gSCreen)) itemCount))
					(objRemoveItem gSource gBaseItem 
						(multiply itemCount 
							(block Nil
								; for every item in the CCBuyAndModifyArray
								(for counter 0	(subtract (count (itmGetStaticData gBaseItem 'CCBuyAndModify)) 1)
								
									; if the current item from the array matches the item being purchased then
									(if (eq (itmGetType (scrGetItem gScreen)) (@ (@ (itmGetStaticData gBaseItem 'CCBuyAndModify) counter) 'Product))
									
										; set the itemMult equal to the base items required to build the new item
										(setq itemMult (@ (@ (itmGetStaticData gBaseItem 'CCBuyAndModify) counter) 'count))
										)
									)
								itemMult
								)
							)
						)
					(rpgBuyItem gSource itemsToBuy (multiply itemCount itemCost) (objGetDefaultCurrency gSource))
					)
				)
			)
			
		(setq intCabbageGetFuelEfficiency 
			(lambda (spaceObj)
				(block (reactor)
					(setq reactor (@ (objGetItems spaceObj "rI") 0))
					
					; if no reactor is installed, default fuel efficienc defaults to 15
					(If (not reactor)
						15
						(typGetDataField (itmGetType reactor) "fuelEfficiency")
						)
					)
				)
			)
			
		(setq intCabbageShpConsumePower 
			(lambda (spaceObj fuelAmount)
				(block (reactor)
					(setq reactor (@ (objGetItems spaceObj "rI") 0))
					(shpConsumeFuel gSource (divide (multiply fuelAmount 100)
					
						; if no reactor is installed, default fuel efficienc defaults to 15
						(If (not reactor)
							15
							(typGetDataField (itmGetType reactor) "fuelEfficiency")
							)
						))
					)
				)
			)
			
		(setq intCabbageCorpCrime 
			(lambda (severity description)
				(if (gr severity (int (objGetData gPlayerShip "CCCrimeSeverity")))
					(block Nil
						(objSetData gPlayerShip "CCCrimeSeverity" severity)
						(objSetData gPlayerShip "CCCrime" description)
						)
					)
				)
			)
		
		(setq intCabbageCorpOnDestroy 
			(lambda Nil
				(block (CCKraken theDestroyer)
					; Destroy items on the station
					(intDestroyItems gSource)
					
					; Create a Cabbage Corp Kraken to avenge the station
					(setq CCKraken
						(sysCreateShip &scCCCheopsNPC; (objGetNearestStargate gSource) &svCCCabbageCorp;)
						)
						
					; If someone destroyed the station, avenge
					(setq theDestroyer aOrderGiver)
					(if (and theDestroyer
							(objCanAttack theDestroyer)
							(not (eq (objGetSovereign theDestroyer) &svCCCabbageCorp;))
							)
						(block Nil
							(objSendMessage gPlayerShip gSource "Security alert! Release the Kraken!")
							(shpOrderAttack CCKraken theDestroyer)
							
							; Since the cruiser is busy, deploy some transports to loot the station
							(for i 1 (random 1 3)
								(block (transport)
									(setq transport
										(sysCreateShip &scCCLorryNPC; (objGetNearestStargate gSource) &svCCCabbageCorp;)
										)
										
									(shpOrderLoot transport gSource)
									(shpOrderGate transport)
									)
								)
							)
						)
						
					; If the player destroyed the station, then she is banned
					(if (and gPlayerShip (eq aOrderGiver gPlayerShip))
						(intCabbageCorpCrime 3 (cat "the destruction of a " (objGetName gSource 4)))
						)
						
					; Take all the items from the station (so that others won't loot it)
					(shpOrderLoot CCKraken gSource)
					
					; Gate out
					(shpOrderGate CCKraken)
					)
				)
			)
			
		(setq CCAsteroidScanner
			(lambda (gRange)
				(if (and
						(eq gSource gPlayerShip)
						(itmIsInstalled gItem) 
						(objIsDeviceEnabled gSource gItem)
						)
					(block (asteroids)
						(setq asteroids
							(filter
								(sysFindObject gSource (cat "t +asteroid; N:" gRange ";"))
								asteroid
								(gr (count (objGetItems asteroid "t +Ore;")) 0)
								)
							)
						
						(if (gr (count asteroids) 0)												;continues if there was at least one asteroid that contains ore
							(enum	asteroids 														;list of items to which the following function will be applied
									spaceObj														;arbitrary placeholder in the following function for each item from the previously defined list
									(sysCreateEffect &efCCOreMarker; spaceObj (objGetPos spaceObj))	;creates this effect as if the object called up the effect, and at the position of the object
								)
							)
						)
					)
				)
			)
			
		(setq CCMicrosaurScanner
			(lambda (gRange)
				(if (and
						(eq gSource gPlayerShip)
						(itmIsInstalled gItem) 
						(objIsDeviceEnabled gSource gItem)
						)
					(block (containers)
						(setq containers
							(filter
								(sysFindObject gSource (cat "t +asteroid; N:" gRange ";"))
								container
								(gr (count (objGetItems container "t +unid:0x00004033;")) 0)
								)
							)
						
						(if (gr (count containers) 0)														;continues if there was at least one asteroid that contains ore
							(enum	containers 																;list of items to which the following function will be applied
									spaceObj																;arbitrary placeholder in the following function for each item from the previously defined list
									(sysCreateEffect &efCCMicrosaurMarker; spaceObj (objGetPos spaceObj))	;creates this effect as if the object called up the effect, and at the position of the object
								)
							)
						)
					)
				)
			)
			
		(setq CCMicrosaurScanObj (lambda (asteroidObj podType)
				(block (
					(podOreCriteria (typGetStaticData podType 'oreCriteria))
					(oreCriteria (if podOreCriteria podOreCriteria "t +unid:0x00004033;"))
					oreFound
					)
					
					(switch
						; If there are no detectable Microsaurs here, nothing to do
						(not (setq oreFound (objGetItems asteroidObj oreCriteria)))
							Nil
							
						; If we already have this overlay, then nothing to do
						(filter (objGetOverlays asteroidObj) theOverlay
								(= (objGetOverlayType asteroidObj theOverlay) &ovCCMicrosaurDetectionCount;)
								)
							Nil
							
						; Otherwise, create an overlay
						(block (
							overlayID
							)
							
							(setq overlayID (objAddOverlay asteroidObj &ovCCMicrosaurDetectionCount;))
							(objSetOverlayProperty asteroidObj overlayID 'counterLabel (typTranslate &ovCCMicrosaurDetectionCount; 'msgScanning))
							
							; Return TRUE to indicate that we found ore
							True
							)
						)
					)
				)
			)
	)
</Globals>

<!--
	Add check for Cabbage Corp diplomatic immunity when being arrested for destroying stations, pay a fine instead of dying.
	Add check for cabbage corp premium membership at cabbage corp stations, buy a new identity and don't get arrested for having previously destroyed stations.
-->

</TranscendenceModule>
