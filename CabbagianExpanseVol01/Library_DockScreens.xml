<?xml version="1.0" ?>
<TranscendenceModule>

<!-- ======================================================================= -->
							<!-- Ship DockScreens -->							
<!-- ======================================================================= -->

	<!-- Cabbage Corp Toolset -->

	<DockScreen	UNID="&scCCCabbageModification;"
			name=				"Cabbage Corp Toolset"
			desc=				"Equipment Configuration"
			type=				"customItemPicker"
			backgroundID=		"&rsItemListScreen;"
			nestedScreen=		"true"
	>
			
		<Events>
			<OnGlobalPaneInit>
				; aScreenUNID is the UNID of the screen being shown
				; aScreen is the screen name (if this is a local screen)
				; aPane is the pane being shown
				; Action only appears if any item with the Cabbage attribute is installed.
				(if (and
						; If the following list exists then it counts as True
						(filter (objGetItems gPlayership "dI +cabbageCorp") theItem (itmIsKnown theItem))
						(eq aScreenUNID &dsShipInterior;)
						(eq aPane "Default")
					)
					(scrAddAction
						gScreen
						'cabbageCorp
						0
						"Cabbage Corp Toolset"
						"C"
						Nil
						(scrShowScreen gScreen "&scCCCabbageModification;")
					)
				)
			</OnGlobalPaneInit>
		</Events>

		
		<List>
			(filter (objGetItems gPlayership "dI +cabbageCorp") theItem (itmIsKnown theItem))
		</List>

		<Panes>
			<Default
					desc=	"You are viewing the ship's configuration.">

				<OnPaneInit>
					(block (gItem desc)
						(setq gItem (scrGetItem gScreen))

						(if gItem
							(block (theCategory)
								(setq desc (cat "Unit mass: " (strMassString (itmGetMass gItem)) "\n\n"))

								; Describe the item installation
								(setq desc (cat desc (objGetInstalledItemDesc gPlayerShip gItem) "."))
								
								; Display
								(scrSetDesc gScreen desc)
							)
						)
						(scrEnableAction gScreen 0
							(and
								(itmMatches gItem "dN +cabbageCorp;")	; Undamaged Cabbage Corp device
								(ls (itmIsEnhanced gItem) 0x8000)		; Not enhanced with a negative effect
							)
						)
						(scrEnableAction gScreen 1 (not (eq (itmGetStaticData gItem 'CCItemSwap) Nil)))
						(scrEnableAction gScreen 2 (not (eq (itmGetStaticData gItem 'useScreen) Nil)))
					)
				</OnPaneInit>
				<Actions>
					<Action name="Factory Reset" default="1" key="F">
						<ShowPane pane="CCFactoryReset"/>
					</Action>
					
					<Action name="Modify" key="M">
						(block Nil
							(intModifyHardware (itmGetStaticData gItem 'CCItemSwap))
							(scrExitScreen gScreen)
						)
					</Action>
					
					<Action name="Use Equipment" key="U">
						(block Nil
							(scrShowScreen gScreen (itmGetStaticData gItem 'useScreen))
						)
					</Action>
					
					<Action name="Done" cancel="1" key="D">
						(scrExitScreen gScreen)
					</Action>

				</Actions>

			</Default>
			
			<CCFactoryReset
							desc=	"Are you sure you wish to reset your Cabbage Corp device's software to its factory state?  This operation cannot be undone and all current enhancements to the device will be lost.  This will not fix physical alterations or damage to the device and it may compound existing problems.">

				<Actions>
					<Action name="Apply Factory Reset" default="1" key="A">
						(block (currentFuel newDevice baseFuel)
							(setq gItem (scrGetItem gScreen))
							(setq currentFuel (shpGetFuelLeft gSource))
							(setq newDevice (itmCreate (itmGetType gItem) 1))
							
							(shpRemoveDevice gSource gItem)
							(objRemoveItem gSource (itmSetProperty gItem 'installed Nil) 1)
							
							(if (eq (random 1 20) 1)
								(if (itmGetProperty gItem 'disrupted)
									(setq newDevice (itmSetProperty newDevice 'damaged True))
									(setq newDevice (itmSetProperty newDevice 'disrupted True))
								)
							)
							
							(objAddItem gSource newDevice)
							(shpInstallDevice gSource newDevice)
							
							(setq baseFuel (shpGetFuelLeft gSource))
							(shpConsumeFuel gSource (multiply (subtract currentFuel baseFuel) -1))
							(scrExitScreen gScreen)
						)
					</Action>
					
					<Action name="Cancel" cancel="1" key="C">
						(scrExitScreen gScreen)
					</Action>

				</Actions>
			</CCFactoryReset>
		</Panes>
	</DockScreen>

<!-- ======================================================================= -->
							<!-- Station DockScreens-->							
<!-- ======================================================================= -->
	
	<DockScreen unid="&dsCCBuyAndModify;"
			type=				"customItemPicker"
			inherit=			"&dsDockScreenBase;"
			nestedScreen=		"true"
	>
			
		<Events>
			<OnGlobalPaneInit>
				;	aScreenUNID is the UNID of the screen being shown
				;	aScreen is the screen name (if this is a local screen)
				;	aPane is the pane being shown
				;	Action only appears if any item with the Cabbage attribute is installed.
				(if (eq (objGetItems gSource "* +cabbageCorp") Nil)
					Nil
					(if (and 
							(eq aScreenUNID &dsRPGCommoditiesExchangeBuy;) 
							(eq aPane "Default")
							(or
								(eq (objGetType gSource) &stCCFranchise;)
								(eq (objGetType gSource) &stCCDealer;)
								(eq (objGetType gSource) &stCCFactory;)
								(eq (objGetType gSource) &stCCOutpost;)
							)
							(not (eq (itmGetStaticData (scrGetItem gScreen) 'CCBuyAndModify) Nil))
						)
						(scrAddAction
							gScreen
							'buyAndModify
							1
							"Buy &amp; Modify"
							"M"
							'default
							(block Nil
								(setq gBaseItem (scrGetItem gScreen))
								(scrShowScreen gScreen "&dsCCBuyAndModify;")
							)
						)
					)
				)
			</OnGlobalPaneInit>
		</Events>
	
		<List>
			(map (itmGetStaticData gBaseItem 'CCBuyAndModify) theRecipe
			
				;	Only add items to the list if the station has the resources to make them.
			
				(if (gr (divide (itmGetCount gBaseItem) (@ theRecipe 'count)) 0)
					(itmCreate (@ theRecipe 'product) (divide (itmGetCount gBaseItem) (@ theRecipe 'count)))
				)
			)
		</List>
		
		<Panes>
			<Default>
				<OnPaneInit>
				(block 
					(
						(thisItem (scrGetItem gScreen))
						
						(rawCost)
					)
					(objAddItem gSource thisItem)
							
					<!-- Custom Stuff -->						
					(setq rawCost 
						(add (objGetSellPrice gSource thisItem) 
							(block Nil
								(for counter 0	(subtract (count (itmGetStaticData gBaseItem 'CCBuyAndModify)) 1)
									(if (eq (itmGetType thisItem) (@ (@ (itmGetStaticData gBaseItem 'CCBuyAndModify) counter) 'Product))
										(setq rawCost (@ (@ (itmGetStaticData gBaseItem 'CCBuyAndModify) counter) 'extraCost))
									)
								)
								rawCost
							)
						)
					)
					<!-- Custom stuff -->
					
					(block 
						(
							;	Compute the cost of this item.
							
							(currencyUsed (objGetDefaultCurrency gSource))
							(itemCost (if rawCost rawCost 0))
							
							;	Items available
							
							(availCount (itmGetCount thisItem))
							
							;	How many items can we afford?
							;	NOTE: If price is 0 it means not for sale.
							
							(affordCount (if (gr itemCost 0)
								(divide (objGetBalance gPlayerShip currencyUsed) itemCost)
								0
								))
								
							;	How many items can we fit?
							
							(fitCount (objGetFitCount gPlayerShip thisItem))
							
							;	Max items we can buy
							
							(maxCount (min availCount affordCount fitCount))
							
							;	Can this item be installed?
							
							(installResult (rpgInstallDevicePrep {
								item: thisItem

								buyAndInstall: True
								checkMilitaryID: (@ gData 'checkMilitaryID)
								checkTotalPower: True
								currencyUsed: currencyUsed
								installerObj: gSource
								itemInCargo: True
								}))
						)
						
						;	Set the description
						
						(switch
							(not thisItem)
								(scrSetDescTranslate gScreen 'errorNoItemsToBuy)
								
							(scrSetDesc gScreen
								(scrTranslate gScreen 'descItemStats {
									value: (if (gr itemCost 0) (fmtCurrency currencyUsed itemCost))
									max: (if (gr maxCount 1) maxCount)
									maxValue: (fmtCurrency currencyUsed (multiply itemCost maxCount))
									mass: (strMassString (itmGetMass thisItem))
									maxMass: (strMassString (multiply (itmGetMass thisItem) maxCount))
									})
									
								(switch
									(eq itemCost 0)
										(scrTranslate gScreen 'descNotForSale)
										
									(eq affordCount 0)
										(scrTranslate gScreen 'descNotEnoughMoney { currency: (fmtCurrency currencyUsed True) })
										
									(eq fitCount 0)
										(scrTranslate gScreen 'descNotEnoughRoom)
										
									(and (gr availCount affordCount) (gr fitCount affordCount))
										(scrTranslate gScreen 'descNotEnoughMoneyForAll { currency: (fmtCurrency currencyUsed True) value: affordCount })
										
									(and (gr availCount fitCount))
										(scrTranslate gScreen 'descNotEnoughRoomForAll { value: fitCount })
								)
							)
						)
							
						;	Remember some computed values
						
						(scrSetData gScreen 'maxCount maxCount)
						(scrSetData gScreen 'itemCost itemCost)
						
						;	Remember installation result
						
						(if (@ installResult 'canInstall)
							(scrSetData gScreen 'installResult installResult)
							(scrSetData gScreen 'installResult Nil)
						)
							
						;	Enable/disable actions
						
						(scrEnableAction gScreen 'actionBuy (gr maxCount 0))
						(scrShowAction gScreen 'actionShowInstallables (and (scrGetData gScreen 'installablesOption) (not (typGetData &dsRPGCommoditiesExchangeBuy; 'showInstallables))))
						(scrShowAction gScreen 'actionHideInstallables (and (scrGetData gScreen 'installablesOption) (typGetData &dsRPGCommoditiesExchangeBuy; 'showInstallables)))
					)
					
					(objRemoveItem gSource thisItem)
				)
				</OnPaneInit>
				
				<Actions>
					<Action id="actionBuy" default="1">
						(block (
							(thisItem (scrGetItem gScreen))
							(maxCount (scrGetData gScreen 'maxCount))
							(itemCost (scrGetData gScreen 'itemCost))
							(installResult (scrGetData gScreen 'installResult))
							)
							
							(switch
								;	Ask for a quantity, if necessary
								
								(gr maxCount 1)
									(scrShowPane gScreen "BuyQuantity")
									
								;	Can we install this item?
								
								installResult
									(scrShowPane gScreen "InstallItem")
									
								;	Otherwise, complete transaction
									
								(block Nil
									(intBuyModifiedItems 1 itemCost)
									(scrExitScreen gScreen)
								)
							)
						)
					</Action>
					
					<Action id="actionShowInstallables" minor="true">
						(block Nil
							(typSetData &dsRPGCommoditiesExchangeBuy; 'showInstallables True)
							(scrRefreshScreen gScreen)
						)
					</Action>
					
					<Action id="actionHideInstallables" minor="true">
						(block Nil
							(typSetData &dsRPGCommoditiesExchangeBuy; 'showInstallables Nil)
							(scrRefreshScreen gScreen)
						)
					</Action>
					
					<Action id="actionDone" cancel="1">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</Default>
			
			<BuyQuantity
					showCounter=	"true">

				<OnPaneInit>
					(block (
						(maxCount (scrGetData gScreen 'maxCount))
						(itemCost (scrGetData gScreen 'itemCost))
					)
						
						(scrSetDescTranslate gScreen 'descBuyQuantity { value: (fmtCurrency (objGetDefaultCurrency gSource) itemCost) })
						(scrSetCounter gScreen maxCount)
					)
				</OnPaneInit>

				<Actions>
					<Action id="actionBuy" default="1">
						(block (
							(thisItem (scrGetItem gScreen))
							(countToBuy (scrGetCounter gScreen))
							(maxCount (scrGetData gScreen 'maxCount))
							(itemCost (scrGetData gScreen 'itemCost))
							(installResult (scrGetData gScreen 'installResult))
							)
							
							(switch
								(gr countToBuy maxCount)
									(scrSetCounter gScreen maxCount)
									
								(and (eq countToBuy 1) installResult)
									(scrShowPane gScreen "InstallItem")
									
								(block Nil
									(intBuyModifiedItems countToBuy itemCost)
									(scrExitScreen gScreen)
								)
							)
						)
					</Action>

					<Action id="actionCancel" cancel="1">
						<ShowPane pane="Default"/>
					</Action>
				</Actions>
			</BuyQuantity>
			
			<InstallItem
					noListNavigation="true"
					>
				<OnPaneInit>
					(block (
						(thisItem (scrGetItem gScreen))
						(itemCost (scrGetData gScreen 'itemCost))
						(currencyUsed (objGetDefaultCurrency gSource))
						(installResult (scrGetData gScreen 'installResult))
						(installCost (@ installResult 'price))
						(installDesc (@ installResult 'desc))
						(canInstall Nil)
						)
						
						(switch
							(gr installCost (objGetBalance gPlayerShip currencyUsed))
								(scrSetDescTranslate gScreen 'descNotEnoughMoneyToInstall { installDesc: installDesc value: (fmtCurrency currencyUsed itemCost) })
								
							(block Nil
								(scrSetDescTranslate gScreen 'descBuyOrInstall { 
									installDesc: installDesc
									buyValue: (fmtCurrency currencyUsed itemCost) 
									installValue: (fmtCurrency currencyUsed installCost) 
									})
								(setq canInstall True)
							)
						)
							
						(scrEnableAction gScreen 'actionBuyAndInstall canInstall)
					)
				</OnPaneInit>

				<Actions>
					<Action id="actionBuyAndInstall" default="1">
						(block (
							(itemInstalled (scrGetItem gScreen))
							(itemCost (scrGetData gScreen 'itemCost))
							(installResult (scrGetData gScreen 'installResult))
							(installCost (@ installResult 'price))
							)
								
							(scrSetData gScreen 'itemInstalled itemInstalled)
								
							(intBuyModifiedItems 1 installCost)
								
							(shpInstallDevice gPlayerShip itemInstalled)
							(typSetData &svPlayer; 'tutorialInstalled True)
							(scrShowPane gScreen "InstallSuccess")
						)
					</Action>

					<Action id="actionBuyOnly">
						(block (
							(itemCost (scrGetData gScreen 'itemCost))
							)
							
							(intBuyModifiedItems 1 itemCost)
							(scrExitScreen gScreen)
						)
					</Action>

					<Action id="actionCancel" cancel="1">
						(scrShowPane gScreen "Default")
					</Action>
				</Actions>
			</InstallItem>
			
			<InstallSuccess
					noListNavigation="true"
			>
				<OnPaneInit>
					(scrSetDescTranslate gScreen 'descInstallationSuccessful { 
						item: (scrGetData gScreen 'itemInstalled)
						})
				</OnPaneInit>

				<Actions>
					<Action id="actionContinue" cancel="1" default="1">
						(scrShowPane gScreen "Default")
					</Action>
				</Actions>
			</InstallSuccess>
		</Panes>
		
		<Language>
			<Text id="actionBuy">"[B]uy"</Text>
			<Text id="actionBuyAndInstall">"Buy &amp; [I]nstall"</Text>
			<Text id="actionBuyOnly">"[B]uy Only"</Text>
			<Text id="actionShowInstallables">"[S]how Dock Service Items"</Text>
			<Text id="actionHideInstallables">"[H]ide Dock Service Items"</Text>
			
			<Text id="descItemStats">
				(if (@ gData 'max)
					(cat
						"Unit price: " (@ gData 'value) " (" (@ gData 'max) " for " (@ gData 'maxValue) ")\n"
						"Unit mass: " (@ gData 'mass) " (" (@ gData 'max) " for " (@ gData 'maxMass) ")\n\n"
					)
					(cat
						"Unit price: " (@ gData 'value) "\n"
						"Unit mass: " (@ gData 'mass) "\n\n"
					)
				)
			</Text>
			<Text id="descBuyOrInstall">
				(cat
					(@ gData 'installDesc) "\n\n"
					
					"Do you wish to buy and install it for " (@ gData 'installValue) ", "
					"or do you wish to only buy it for " (@ gData 'buyValue) "?"
				)
			</Text>
			<Text id="descNotForSale">
				"This item is not for sale."
			</Text>
			<Text id="descNotEnoughMoney">
				(cat
					"You do not have enough " (@ gData 'currency) " to purchase any."
				)
			</Text>
			<Text id="descNotEnoughMoneyToInstall">
				(cat
					(@ gData 'installDesc) "\n\n"
					
					"Unfortunately, you cannot afford the installation cost. "
					"Do you wish to buy it without installation for " (@ gData 'value) "?"
				)
			</Text>
			<Text id="descNotEnoughRoom">
				"Unfortunately, you cannot fit any in your cargo hold."
			</Text>
			<Text id="descNotEnoughMoneyForAll">
				(cat
					"You have enough " (@ gData 'currency) " to buy " (@ gData 'value) "."
				)
			</Text>
			<Text id="descNotEnoughRoomForAll">
				(cat
					"You have enough room in your cargo hold to carry " (@ gData 'value) "."
				)
			</Text>
			<Text id="descBuyQuantity">
				(cat
					"How many items do you wish to purchase at " (@ gData 'value) " each?"
				)
			</Text>
			<Text id="descInstallationSuccessful">
				(cat 
					(itmGetName (@ gData 'item) 0x01) " installed successfully."
				)
			</Text>
			
			<Text id="errorNoItemsToBuy">"There are no items available for sale."</Text>
		</Language>
	</DockScreen>
		
	<!-- Cabbage Corp Current Deals -->

	<DockScreen	UNID="&dsCCCabbageCorpCurrentDeals;"
			name=				"Current Deals"
			desc=				"Current Deals"
			nestedScreen=   	"true"
	>

		<Panes>
					
			<Default
					desc=	"You are at a Cabbage Corp advertisement kiosk.">

				<OnPaneInit>
						(scrEnableAction gScreen 0 (or
							(eq (objGetType gSource) &stCCFranchise;)
							(eq (objGetType gSource) &stCCDealer;)
							(eq (objGetType gSource) &stCCFactory;)
							(eq (objGetType gSource) &stCCOutpost;)
						))
				</OnPaneInit>
					
				<Actions>
					<Action name="View Special Deal" default="1" key="V">
						(block (gType gMasterList gListLevel gSubList gPreItem)
							(setq gType (modulo (@ (objGetPos gSource) 0) 3))		;Determines the deal based on station location
							(setq gMasterList (typGetData &svCCCabbageCorp; 'SpecialDeal))
							(setq gListLevel (subtract (sysGetLevel) 1))
							(setq gSubList (@ gMasterList gListLevel))
							(setq gPreItem (@ gSubList gType))
							<!--
							old code for completely random generation every time the screen is loaded
							(setq gPreItem (randomTable 40 (@ gSubList 0) 20 (@ gSubList 1) 20 (@ gSubList 2) 20 (@ gSubList 3)))
							-->
							(setq gItem (itmCreate gPreItem 1))
							
							(setq gCost (add (itmGetPrice gItem) (divide (itmGetInstallCost gItem) 2)))
							(setq gCheckMilitaryID (not (objGetData gPlayerShip "CCPremiumIDImplant")))
							(scrShowScreen gScreen "&dsInstallSpecificDevice;")
						)
					</Action>

					<Action name="Buy Cabbage Corp Diplomatic ID" key="D">
						(block Nil
							(setq gItem (itmCreate &itCCDiplomaticID; 1))
							(setq gCheckMilitaryID (not (objGetData gPlayerShip "CCPremiumIDImplant")))
							(scrShowPane gScreen "PurchaseSpecificItem")
						)
					</Action>

					<Action name="Buy Cabbage Corp Premium Membership ID" key="P">
						(block Nil
							(setq gItem (itmCreate &itCCPremiumID; 1))
							(setq gCheckMilitaryID (not (objGetData gPlayerShip "CCPremiumIDImplant")))
							(scrShowPane gScreen "PurchaseSpecificItem")
						)
					</Action>

					<Action name="Buy Cabbage Corp System Map Access ROM" key="S">
						(block Nil
							(setq gItem (itmCreate &itCCSystemMapROM; 1))
							(setq gCheckMilitaryID (not (objGetData gPlayerShip "CCPremiumIDImplant")))
							(scrShowPane gScreen "PurchaseSpecificItem")
						)
					</Action>
					
					<Action name="Done" cancel="1" key="N">
						(scrExitScreen gSource)
					</Action>
				</Actions>
			</Default>
			
			<PurchaseSpecificItem>

				<OnPaneInit>
					(block (desc)					
						(setq desc (cat 
							(itmGetProperty gItem 'description)
							"\n\n"
							"Cost: "
							(itmGetPrice gItem)
							" credits."
						))
						
						(scrSetDesc gScreen desc)
					
						; Enable/disable buttons
						(scrEnableAction gScreen 0 (geq (objGetBalance gPlayerShip) (itmGetPrice (itmGetType gItem))))
					)
				</OnPaneInit>

				<Actions>
					<Action name="Purchase this Item" default="1" key="P">
						(if (geq (objGetBalance gPlayerShip) (itmGetPrice (itmGetType gItem)))
							(block (itemPrice)
								; Add the item
								(objAddItem gPlayerShip gItem)
								(objCharge gPlayerShip (objGetDefaultCurrency gSource) (itmGetPrice gItem))
								(typSetData &svPlayer; 'tutorialInstalled True)
								
								; If we're charging the player more than the cost of
								; the device, then count it as a purchase
								(setq itemPrice (itmGetPrice gItem (objGetDefaultCurrency gSource)))
								(if (geq (itmGetPrice gItem) itemPrice)
									(plyRecordBuyItem gPlayer gItem (objGetDefaultCurrency gSource) itemPrice)
								)

								(setq gResult True)
								(scrShowPane gScreen "Default")
							)
						)
					</Action>

					<Action name="Cancel" cancel="1" key="C">
						(block Nil
							(setq gResult Nil)
							(scrShowPane gScreen "Default")
						)
					</Action>
				</Actions>
			</PurchaseSpecificItem>
		</Panes>
	</DockScreen>
		
	<!-- Cabbage Corp Workshop -->

	<DockScreen	UNID="&dsCCCabbageCorpWorkshop;"
			name=				"Cabbage Corp Workshop"
			desc=				"CabbageCorp Workshop"
			nestedScreen=   	"true"
	>

		<Panes>
					
			<Default
					desc=	"You are at a Cabbage Corp Workshop terminal.">
					
				<Actions>
					<Action name="Custom Weapons" key="W">
						(block Nil
							(setq gSovereign &svCCCabbageCorp;)
							(setq gRecipes 'WeaponRecipes)
							(setq gTechLevel (objGetStaticData gSource "CCLevel"))
							(scrShowScreen gScreen "&dsCCCabbageCustomWork;")
						)
					</Action>
					
					<Action name="Custom Armor" key="A">
						(block Nil
							(setq gSovereign &svCCCabbageCorp;)
							(setq gRecipes 'ArmorRecipes)
							(setq gTechLevel (objGetStaticData gSource "CCLevel"))
							(scrShowScreen gScreen "&dsCCCabbageCustomWork;")
						)
					</Action>

					<Action name="Custom Devices" key="D">
						(block Nil
							(setq gSovereign &svCCCabbageCorp;)
							(setq gRecipes 'Recipes)
							(setq gTechLevel (objGetStaticData gSource "CCLevel"))
							(scrShowScreen gScreen "&dsCCCabbageCustomWork;")
						)
					</Action>

					<Action name="Custom Modifications" key="M">
						(block Nil
							(setq gSovereign &svCCCabbageCorp;)
							(setq gRecipes 'IllegalRecipes)
							(setq gTechLevel (objGetStaticData gSource "CCLevel"))
							(scrShowScreen gScreen "&dsCCCabbageCustomWork;")
						)
					</Action>
					
					<Action name="Repair Items" key="R">
						(scrShowScreen gScreen "&dsRPGRepairItem;" 
							{criteria: "*~aD +Cabbage;" priceAdj: 75}
						)
					</Action>
					
					<Action name="Done" cancel="1" key="N">
						(scrExitScreen gSource)
					</Action>
				</Actions>
			</Default>
		</Panes>
	</DockScreen>
	
		<!-- Cabbage Custom Work -->
	
	<DockScreen UNID="&dsCCCabbageCustomWork;"
			type=           "customItemPicker"
			backgroundID=   "&rsItemListScreen;"
			nestedScreen=   "true"
	>
	
		<List>
			(map (typGetData gSovereign gRecipes) 'excludeNil theRecipe
				(tinkerCreateItem theRecipe 1)
			)
		</List>
		
		<Panes>
			<Default>
			
				<OnPaneInit>
					
					(block (theItem theRecipe theComponents desc componentDesc componentPrice workCost errorDesc missingComponents maxCount availableComponents)
						(setq theItem (scrGetItem gScreen))
						
						;	Find the recipe for this item
						
						(setq theRecipe
							(@ (filter (typGetData gSovereign gRecipes) theRecipe
									(eq (@ theRecipe 'item) (itmGetType theItem))
								)
								0
							)
						)
							
						;	Describe the components needed
						
						(setq theComponents 
							(map (@ theRecipe 'components) theDesc
								(itmCreate (@ theDesc 'item) (@ theDesc 'count))
							)
						)

						(setq componentDesc (strItemList theComponents 0x0108))
							
						;	Compute the total price of the components and compare to the
						;	price of the result.
						
						(setq componentPrice 
							(map theComponents 'reduceSum theComponent 
								;	For devices we assume a damaged device
								(if (itmMatches theComponent "d")
									(multiply (itmGetCount theComponent) (itmGetPrice (itmSetProperty theComponent 'damaged True)))
									(multiply (itmGetCount theComponent) (itmGetPrice theComponent))
								)
							)
						)
						
						;	The total cost of the work compensates for any difference between
						;	the input and output prices.
						
						(setq workCost 
							(add
								(max 
									50
									(intRoundUp (subtract (itmGetPrice theItem) componentPrice) 25)
								)
								(@ theRecipe 'extraCost)
							)
						)
							
						;	For each required component, add up the number of items the player
						;	actually has. Note that we accept damaged items.
						
						(setq availableComponents
							(map theComponents theComponent
								(block (countAvailable)
									(setq countAvailable 0)
									
									;	Add the number of non-damaged items we have
								
									(setq countAvailable (add countAvailable
										(objHasItem gPlayerShip theComponent 1)
										)
									)
										
									;	Now add damaged items
									
									(setq countAvailable (add countAvailable
										(objHasItem gPlayerShip (itmSetProperty theComponent 'damaged True) 1)
										)
									)
										
									;	Compose entry
									
									{	item: theComponent
										available: countAvailable
									}
								)
							)
						)
							
						;	Generate a list of the number of items the player is missing.
						;	Note that we accept damaged items.
						
						(setq missingComponents
							(map availableComponents 'excludeNil theEntry
								(block (countAvailable)
									(switch
										(eq (@ theEntry 'available) 0)
											(cat "\n\nUnfortunately, you do not have any " (itmGetName (@ theEntry 'item) 0x102) ".")
											
										(ls (@ theEntry 'available) (itmGetCount (@ theEntry 'item)))
											(cat "\n\nUnfortunately, you only have " (itmGetName (itmSetCount (@ theEntry 'item) (@ theEntry 'available)) 0x1100) ".")
											
										;	Otherwise we have enough, so these items are not missing
										
										Nil
									)
								)
							)
						)
							
						;	See if the player has the required components and money
						
						(switch
							missingComponents
								(block Nil
									(setq maxCount 0)
									(setq errorDesc (@ missingComponents 0))
								)
								
							(leq (plyGetCredits gPlayer) workCost)
								(block Nil
									(setq maxCount 0)
									(setq errorDesc "\n\nUnfortunately, you cannot afford the cost.")
								)

							(block Nil
								;	Figure out the maximum number of items we could create
						
								(setq maxCount (divide (plyGetCredits gPlayer) workCost))
								(enum availableComponents theEntry
									(setq maxCount (min
										maxCount
										(divide (@ theEntry 'available) (itmGetCount (@ theEntry 'item)))
										)
									)
								)
									
								(setq errorDesc "")
							)
						)
						
						;	Set the description
						
						(switch
							(not componentDesc)
								(scrSetDesc gScreen
									"\"To fabricate " (itmGetName theItem 0x0108) " we charge " workCost " credits."
									errorDesc
									"\""
								)
								
							(scrSetDesc gScreen
								"\"To fabricate " (itmGetName theItem 0x0108) " we need "
								componentDesc
								" plus " workCost " credits."
								errorDesc
								"\""
							)
						)
							
						;	Remember the recipe, the components, and the cost for later
						
						
						(scrSetData gScreen 'recipe theRecipe)
						(scrSetData gScreen 'components theComponents)
						(scrSetData gScreen 'cost workCost)
						(scrSetData gScreen 'maxCount maxCount)
							
						;	Disable Fabricate action if we can't do it
						
						(scrEnableAction gScreen 0 (gr maxCount 0))
						
					)
						
						
				</OnPaneInit>
				
				<Actions>
					<Action name="Fabricate" default="1" key="F">
						(if (gr (scrGetData gScreen 'maxCount) 1)
							(scrShowPane gScreen "FabricateCount")
							
							(block Nil
								(scrSetData gScreen 'result 
									(tinkerFabricate 
										(scrGetData gScreen 'recipe)
										(scrGetData gScreen 'cost)
										1
										)
									)
								(scrShowPane gScreen "FabricateResult")
								)
							)
					</Action>
					
					<Action name="Done" cancel="1" key="D">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
				
			</Default>
			
			<FabricateCount
					showCounter=	"true"
					>
				<OnPaneInit>
					(block Nil
						(scrSetDesc gScreen (cat "How many items do you wish to fabricate?"))
						(scrSetCounter gScreen (scrGetData gScreen 'maxCount))
						)
				</OnPaneInit>
			
				<Actions>
					<Action name="Fabricate" default="1" key="F">
						(block (count)
							(setq count (scrGetCounter gScreen))
							(if (gr count (scrGetData gScreen 'maxCount))
								(scrSetCounter gScreen (scrGetData gScreen 'maxCount))
								(block Nil
									(scrSetData gScreen 'result 
										(tinkerFabricate 
											(scrGetData gScreen 'recipe)
											(scrGetData gScreen 'cost)
											count
											)
										)
									(scrShowPane gScreen "FabricateResult")
									)
								)
							)
					</Action>
					
					<Action name="Cancel" cancel="1" key="C">
						(scrShowPane gScreen "Default")
					</Action>
				</Actions>
			</FabricateCount>
				
			<FabricateResult
					noListNavigation="true"
					>
				<OnPaneInit>
					(block (theResult)
						(setq theResult (scrGetData gScreen 'result))
						(scrSetDesc gScreen 
							"After much work with the robots the technician returns with their creation: "
							"\"Nothing to it once you know how these machines work.\"\n\n"
							
							"Fabricated: " (itmGetName (@ theResult 'itemsCreated) 0x08) ".\n"
							"Consumed: " (strItemList (@ theResult 'itemsConsumed) 0x08) ".\n"
							"Total Cost: " (@ theResult 'totalCost) " credits."
							)
						)
				</OnPaneInit>
			
				<Actions>
					<Action name="Done" cancel="1" default="1" key="D">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</FabricateResult>
			
		</Panes>
	</DockScreen>

	<!-- Cabbage Corp Execution -->

	<DockScreen UNID="&dsCCCabbageExecution;"	nestedScreen="true">

		<Panes>
			<Default>
				<OnPaneInit>
					(scrSetDesc gScreen (cat "As you enter the station you are surrounded by heavily armed soldiers. A Cabbage Corp officer approaches you: \"You are under arrest for " (objGetData gPlayerShip "CCCrime") "\"" ))
				</OnPaneInit>

				<Actions>
					<Action name="Pan out" cancel="1" default="1" key="P">
						(block Nil
							(plyDestroyed gPlayer (cat "was executed for " (objGetData gPlayerShip "CCCrime")))
							(scrExitScreen gScreen 'forceUndock)
							)
					</Action>
				</Actions>

			</Default>
		</Panes>
	</DockScreen>

</TranscendenceModule>