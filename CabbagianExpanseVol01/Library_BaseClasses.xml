<?xml version="1.0" ?>
<TranscendenceModule>

<!-- ======================================================================= -->
					<!-- Microsaur Scanner Base Classes -->						
<!-- ======================================================================= -->
	
	<ItemType UNID="&baCCMicrosaurScannerPower;"
			name=				"(Microsaur warder base class)"
			virtual=			"true"
			level=				"4"
	>

		<Events>
			<OnCreateShot>
				(block Nil
					(objSetData gSource 'asteroidsFound 0)
				)
			</OnCreateShot>
			
			<OnDamageAbandoned>
				(block ((podType (typGetStaticData aWeaponType 'podType)))
					
					(if (CCMicrosaurScanObj gSource podType)
						(objIncData aCause 'asteroidsFound 1)
					)
						
					;	We return Nil to indicate that we want the default damage
					;	to apply.
					
					Nil
				)
			</OnDamageAbandoned>
		
			<OnDestroyShot>
				(switch
					;	If we found some Microsaurs, then nothing to do (we've marked the Microsaurs found).
					
					(!= (objGetData gSource 'asteroidsFound) 0)
						Nil
						
					;	If we found no Microsaurs, tell the player/orderGiver
					
					(objSendMessage aOrderGiver Nil (typTranslate &ovCCMicrosaurDetectionCount; 'msgNoOreFound))
				)
			</OnDestroyShot>
		</Events>
	</ItemType>

<!-- ======================================================================= -->
						<!-- Shield Emitter Base classes -->								
<!-- ======================================================================= -->
<!--
	TODO: Petition George to make to OnShieldDown event get called for devices 
		other than shields, so long as they are installed on the ship with the
		collapsing shield.
-->

<!-- Shield Emitter Base Class -->

	<ItemType UNID="&baCCShieldEmitterBase;"
			name=				"(shield emitter base class)"
			virtual=			"true"
	>
	<!--
		<Events>
			<OnShieldDown>
				(if (and
						(itmIsInstalled gItem)
						(objGetItemProperty gSource gItem 'enabled)
						(itmGetProperty gItem 'damaged)
					)
					(block (dice)
						(setq dice (random 1 20))
						
						(switch
							(leq dice 1)
								(objDamage gSource &vtCCEmitterDeviceDamage; aAttacker aHitPos)
							(leq dice 4)
								(objDamage gSource &vtCCEmitterDeviceDisrupt; aAttacker aHitPos)
							(leq dice 8)
								(objDamage gSource &vtCCEmitterEMP; aAttacker aHitPos)
							(leq dice 12)
								(objDamage gSource &vtCCEmitterRadiation; aAttacker aHitPos)
							(leq dice 16)
								(objDamage gSource &vtCCEmitterBlinding; aAttacker aHitPos)
							
							(objDamage gSource &vtCCEmitterFlareUp; aAttacker aHitPos)
						)
					)
				)
			</OnShieldDown>
		</Events>
	-->
	</ItemType>
	
<!--
	<OverlayType UNID="&ovCCOnShieldDownCheck;">
		<Events>
			<OnCreate>
				(objSetOverlayData gSource aOverlayID "previousShieldHealth" 0)
			</OnCreate>
			<OnDamage>
				(block nil
					(if (and
							(itmIsInstalled (@ (objGetItems gSource "sI") 0))							;	A shield is installed
							(objGetItemProperty gSource (@ (objGetItems gSource "sI") 0) 'enabled)		;	A shield is enabled
						)
						(objSetOverlayData gSource aOverlayID "currentShieldHealth" (objGetShieldLevel gSource))
					)
					
					(if (and 
							(itmGetProperty (@ (objGetItems gSource "*I +shieldEnhancer") 0) 'damaged)	;	A shield enhancer is damaged
							(itmIsInstalled (@ (objGetItems gSource "sI") 0))							;	A shield is installed
							(objGetItemProperty gSource (@ (objGetItems gSource "sI") 0) 'enabled)		;	A shield is enabled
							(gr (objGetOverlayData gSource aOverlayID "previousShieldHealth") 0)		;	Shield was up
							(eq (objGetOverlayData gSource aOverlayID "currentShieldHealth") 0)			;	Shield is now down
						)
						(block (dice)
							(setq dice (random 1 20))
							
							(switch
								(leq dice 1)
									(objDamage gSource &vtCCEmitterDeviceDamage; aAttacker aHitPos)
								(leq dice 4)
									(objDamage gSource &vtCCEmitterDeviceDisrupt; aAttacker aHitPos)
								(leq dice 8)
									(objDamage gSource &vtCCEmitterEMP; aAttacker aHitPos)
								(leq dice 12)
									(objDamage gSource &vtCCEmitterRadiation; aAttacker aHitPos)
								(leq dice 16)
									(objDamage gSource &vtCCEmitterBlinding; aAttacker aHitPos)
								
								(objDamage gSource &vtCCEmitterFlareUp; aAttacker aHitPos)
							)
						)
					)
					
					(objSetOverlayData gSource aOverlayID "previousShieldHealth" 
								(objGetOverlayData gSource aOverlayID "currentShieldHealth")
					)
				)
			</OnDamage>
		</Events>
	</OverlayType>
-->

</TranscendenceModule>