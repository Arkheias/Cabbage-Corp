<?xml version="1.0" ?>
<TranscendenceModule>

<!-- SHIP CLASSES -->

<!--
Object				Level	Value	Mass	Frequency
Autosentinel		3		490		1000	common
HeavyCeramicPlate	3		300		2500	uncommon
LaserCannon			1		250		1000	common

MIPhantomAuton		2		240		1000	uncommon
LightStealthPlating	2		130		2500	rare
-->
	
	<!-- Auton, Mark I Phantom -->

	<ShipClass UNID="&scCCMarkIPhantomAuton;"
			manufacturer=		"CabbageCorp"
			class=				"mark I Phantom"
			type=				"auton"

			attributes=			"auton, cabbageCorp, genericClass"
			inherit=			"&baStdAutonBase;"
			   
			mass=				"1"
			thrustRatio=		"6"
			maxSpeed=			"25"
			cargoSpace=			"0"

			reactorPower=		"50"
			maxArmor=			"2500"
			maxDevices=			"2"
			maxWeapons=			"1"
			   
			leavesWreck=		"0"
	>

		<!-- Configuration -->
		
		<Armor
			armorID=			"&itCCLightStealthPlating;"
			count=				"1"
			enhancement=		"0x0B00"
		/>	;the enhancement is radiation immunity

		<Maneuver
			maxRotationRate=	"18.0"
			rotationAccel=		"6.0"
		/>
		
		<!-- Image and Effects -->

		<Image imageID="&rsCCF120Phantom;" imageWidth="32" imageHeight="32" rotationCount="120" rotationColumns="12"/>

		<!-- AI and Behavior -->

		<AISettings
			fireRateAdj=		"20"
			fireAccuracy=		"90"
			perception=			"4"
			nonCombatant=		"true"
			noAttackOnThreat=	"true"
			noNavPaths=			"true"
			ignoreShieldsDown=	"true"
		/>
		
		<Communications>
			<Message name="Explore" key="E">
				<OnShow>
					(and (eq (objGetData gSource "behavior") 'escorting)
						(objGetProperty gSource 'playerWingman)
					)
				</OnShow>
				
				<Invoke>
					(block 
						(
							;	Look for the nearest unknown object
							
							(targetObj 
								(@
									(filter (sysFindObject gSource "Ts -uncharted; S:d;") theObj
										(and 
											(not (objIsKnown theObj))
											(objGetProperty theObj 'hasDockingPorts)
											(objCanAttack theObj)
										)
									)
									0
								)
							)
						)
						
						(switch
							;	If no unknown objects, then say so

							(not targetObj)
								(objSendMessage gSender gSource (objTranslate gSource 'NoExploreTarget))
							
							;	Otherwise, send the auton to the nearest object
							
							(block Nil
								(shpCancelOrders gSource)
								(shpOrder gSource 'approach targetObj 75)
								(objSetShowAsDestination gSource)
								
								(objSetData gSource 'behavior 'custom)
								(objSetData gSource 'targetID (objGetID targetObj))
								(objSendMessage gSender gSource (objTranslate gSource 'ExploreAck))
							)
						)
					)
				</Invoke>
			</Message>
			
			<Message name="Form up" key="F">
				<OnShow>
					(and
						(objGetProperty gSource 'playerWingman)
						(or (eq (objGetData gSource 'behavior) 'waiting)
							(eq (objGetData gSource 'behavior) 'custom)
							(objCommunicate gSource gSender 'QueryAttackStatus)
						)
					)
				</OnShow>

				<Invoke>
					(block (behavior)
						(setq behavior (objGetData gSource 'behavior))
						(switch
							(or (not behavior) (eq behavior 'escorting))
								(block Nil
									(objCommunicate gSource gSender 'FormUp)
									(objSendMessage gSender gSource (objTranslate gSource 'FormUpAck "\"Auton order acknowledged\""))
								)

							(block Nil
								(objClearShowAsDestination gSource)
								
								(shpCancelOrders gSource)
								(shpOrder gSource 'escort gPlayerShip)
								
								(objSetData gSource 'behavior 'escorting)
								(objSendMessage gSender gSource (objTranslate gSource 'FormUpAck "\"Auton order acknowledged\""))
							)
						)
					)
				</Invoke>
			</Message>
		</Communications>

		<Events>
			<OnOrdersCompleted>
				(block (behavior theTarget)
					(setq behavior (objGetData gSource 'behavior))
					
					(switch
						;	If we're exploring, then pick a new target
						
						(eq behavior 'custom)
							(block 
								(
									(exploredObj (objGetObjByID (objGetData gSource 'targetID)))
									
									;	Look for the nearest unknown object
							
									(targetObj 
										(@
											(filter (sysFindObject gSource "Ts -uncharted; S:d;") theObj
												(and (not (objIsKnown theObj))
														(objGetProperty theObj 'hasDockingPorts)
														(objCanAttack theObj)
												)
											)
											0
										)
									)
								)
								
								;	Explore object
								
								(if exploredObj
									(block Nil
										(objSetKnown exploredObj)
										(objSendMessage gSender gSource (objTranslate gSource 'ObjectExplored))
										
										(objClearShowAsDestination exploredObj)
									)
								)
								
								;	Pick a new target
								
								(switch
									;	If no unknown objects, then reconnaissance is done
									
									(not targetObj)
										(block Nil
											(shpOrder gSource 'escort gPlayerShip)
											(objClearShowAsDestination gSource)
								
											(objSetData gSource 'behavior 'escorting)
											(objSendMessage gSender gSource (objTranslate gSource 'ExplorationDone))
										)
											
									;	Otherwise, go to new object
									
									(block Nil
										(shpOrder gSource 'approach targetObj 75)
										(objSetData gSource 'targetID (objGetID targetObj))
									)
								)
							)

						;	Otherwise, let our base class handle it.
						
						(typFireEvent &baStdAutonBase; 'OnOrdersCompleted)
					)
				)
			</OnOrdersCompleted>
		</Events>
		
		<Language>
			<Text id="DeployAck">"\"mark I Phantom-class reconnaissance auton online\""</Text>
			<Text id="ExplorationDone">"\"Reconnaissance complete\""</Text>
			<Text id="ExploreAck">"\"Commencing reconnaissance\""</Text>
			<Text id="NoExploreTarget">"\"No unexplored objects in system.\""</Text>
			<Text id="ObjectExplored">
				(block ((exploredObj (objGetObjByID (objGetData gSource 'targetID))))
					
					(cat
						"\"" (objGetName exploredObj 0x01) " found\""
					)
				)
			</Text>
		</Language>
	</ShipClass>

<!--
Object				Level	Value	Mass	Frequency
300DDefender		4		2500	1000	rare
PlasteelPlate		4		400		3000	common
LaserCannon			1		250		1000	common
HullPlateIonizer	2		1500	1500	uncommon
MissileDefense		4		5000	1000	uncommon

MIIPhantomAuton		4		1500	4000	uncommon
1xStealthArmor		4		1000	5000	uncommon
-->
	
	<!-- Auton, Mark II Phantom -->

	<ShipClass UNID="&scCCMarkIIPhantomAuton;"
			manufacturer=		"CabbageCorp"
			class=				"mark II Phantom"
			type=				"auton"

			attributes=			"auton, cabbageCorp, genericClass"
			inherit=			"&baStdAutonBase;"
			   
			mass=				"2"
			thrustRatio=		"7"
			maxSpeed=			"26"
			cargoSpace=			"0"

			reactorPower=		"200"
			maxArmor=			"5000"
			maxDevices=			"2"
			maxWeapons=			"1"
			   
			leavesWreck=		"0"
	>

		<!-- Configuration -->
		
		<Armor
			armorID=			"&itCC1xStealthArmor;"
			count=				"1"
			enhancement=		"0x0B00"
		/>	;the enhancement is radiation immunity

		<Maneuver
			maxRotationRate=	"12.0"
			rotationAccel=		"4.0"
		/>
		
		<!-- Image and Effects -->

		<Image imageID="&rsCCF120Phantom;" imageWidth="32" imageHeight="32" rotationCount="120" rotationColumns="12"/>

		<!-- AI and Behavior -->

		<AISettings
			fireRateAdj=		"20"
			fireAccuracy=		"90"
			perception=			"4"
			nonCombatant=		"true"
			noAttackOnThreat=	"true"
			noNavPaths=			"true"
			ignoreShieldsDown=	"true"
		/>
		
		<Communications>
			<Message name="Explore" key="E">
				<OnShow>
					(and (eq (objGetData gSource "behavior") 'escorting)
						(objGetProperty gSource 'playerWingman)
					)
				</OnShow>
				
				<Invoke>
					(block 
						(
							;	Look for the nearest unknown object
							
							(targetObj 
								(@
									(filter (sysFindObject gSource "Ts -uncharted; S:d;") theObj
										(and 
											(not (objIsKnown theObj))
											(objGetProperty theObj 'hasDockingPorts)
											(objCanAttack theObj)
										)
									)
									0
								)
							)
						)
						
						(switch
							;	If no unknown objects, then say so

							(not targetObj)
								(objSendMessage gSender gSource (objTranslate gSource 'NoExploreTarget))
							
							;	Otherwise, send the auton to the nearest object
							
							(block Nil
								(shpCancelOrders gSource)
								(shpOrder gSource 'approach targetObj 75)
								(objSetShowAsDestination gSource)
								
								(objSetData gSource 'behavior 'custom)
								(objSetData gSource 'targetID (objGetID targetObj))
								(objSendMessage gSender gSource (objTranslate gSource 'ExploreAck))
							)
						)
					)
				</Invoke>
			</Message>
			
			<Message name="Form up" key="F">
				<OnShow>
					(and
						(objGetProperty gSource 'playerWingman)
						(or (eq (objGetData gSource 'behavior) 'waiting)
							(eq (objGetData gSource 'behavior) 'custom)
							(objCommunicate gSource gSender 'QueryAttackStatus)
						)
					)
				</OnShow>

				<Invoke>
					(block (behavior)
						(setq behavior (objGetData gSource 'behavior))
						(switch
							(or (not behavior) (eq behavior 'escorting))
								(block Nil
									(objCommunicate gSource gSender 'FormUp)
									(objSendMessage gSender gSource (objTranslate gSource 'FormUpAck "\"Auton order acknowledged\""))
								)

							(block Nil
								(objClearShowAsDestination gSource)
								
								(shpCancelOrders gSource)
								(shpOrder gSource 'escort gPlayerShip)
								
								(objSetData gSource 'behavior 'escorting)
								(objSendMessage gSender gSource (objTranslate gSource 'FormUpAck "\"Auton order acknowledged\""))
							)
						)
					)
				</Invoke>
			</Message>
		</Communications>

		<Events>
			<OnOrdersCompleted>
				(block (behavior theTarget)
					(setq behavior (objGetData gSource 'behavior))
					
					(switch
						;	If we're exploring, then pick a new target
						
						(eq behavior 'custom)
							(block 
								(
									(exploredObj (objGetObjByID (objGetData gSource 'targetID)))
									
									;	Look for the nearest unknown object
							
									(targetObj 
										(@
											(filter (sysFindObject gSource "Ts -uncharted; S:d;") theObj
												(and (not (objIsKnown theObj))
														(objGetProperty theObj 'hasDockingPorts)
														(objCanAttack theObj)
												)
											)
											0
										)
									)
								)
								
								;	Explore object
								
								(if exploredObj
									(block Nil
										(objSetKnown exploredObj)
										(objSendMessage gSender gSource (objTranslate gSource 'ObjectExplored))
										
										(objClearShowAsDestination exploredObj)
									)
								)
								
								;	Pick a new target
								
								(switch
									;	If no unknown objects, then reconnaissance is done
									
									(not targetObj)
										(block Nil
											(shpOrder gSource 'escort gPlayerShip)
											(objClearShowAsDestination gSource)
								
											(objSetData gSource 'behavior 'escorting)
											(objSendMessage gSender gSource (objTranslate gSource 'ExplorationDone))
										)
											
									;	Otherwise, go to new object
									
									(block Nil
										(shpOrder gSource 'approach targetObj 75)
										(objSetData gSource 'targetID (objGetID targetObj))
									)
								)
							)

						;	Otherwise, let our base class handle it.
						
						(typFireEvent &baStdAutonBase; 'OnOrdersCompleted)
					)
				)
			</OnOrdersCompleted>
		</Events>
		
		<Language>
			<Text id="DeployAck">"\"mark II Phantom-class reconnaissance auton online\""</Text>
			<Text id="ExplorationDone">"\"Reconnaissance complete\""</Text>
			<Text id="ExploreAck">"\"Commencing reconnaissance\""</Text>
			<Text id="NoExploreTarget">"\"No unexplored objects in system.\""</Text>
			<Text id="ObjectExplored">
				(block ((exploredObj (objGetObjByID (objGetData gSource 'targetID))))
					
					(cat
						"\"" (objGetName exploredObj 0x01) " found\""
					)
				)
			</Text>
		</Language>
	</ShipClass>

<!--
Object				Level	Value	Mass	Frequency
300DDefender		4		2500	1000	rare
PlasteelPlate		4		400		3000	common
LaserCannon			1		250		1000	common
HullPlateIonizer	2		1500	1500	uncommon
MissileDefense		4		5000	1000	uncommon

MIIIPhantomAuton	6		12000	10000	uncommon
1xHardStealthArmor	6		3600	5000	uncommon
MIDRADISModule		5		6000	4000	veryrare
-->
	
	<!-- Auton, Mark III Phantom -->

	<ShipClass UNID="&scCCMarkIIIPhantomAuton;"
			manufacturer=		"CabbageCorp"
			class=				"mark III Phantom"
			type=				"auton"

			attributes=			"auton, cabbageCorp, genericClass"
			inherit=			"&baStdAutonBase;"
			   
			mass=				"3"
			thrustRatio=		"8"
			maxSpeed=			"29"
			cargoSpace=			"0"

			reactorPower=		"600"
			maxArmor=			"5000"
			maxDevices=			"2"
			maxWeapons=			"1"
			   
			leavesWreck=		"0"
	>

		<!-- Configuration -->
		
		<Armor
			armorID=			"&itCC1xHardenedStealthArmor;"
			count=				"1"
			enhancement=		"0x0200"
		/>	;the enhancement is regeneration
		
		<Devices>
			<Device deviceID="&itCCMIDRADISModule;"/>
		</Devices>

		<Maneuver
			maxRotationRate=	"12.0"
			rotationAccel=		"6.0"
		/>
		
		<!-- Image and Effects -->

		<Image imageID="&rsCCF120Phantom;" imageWidth="32" imageHeight="32" rotationCount="120" rotationColumns="12"/>

		<!-- AI and Behavior -->

		<AISettings
			fireRateAdj=		"20"
			fireAccuracy=		"90"
			perception=			"4"
			nonCombatant=		"true"
			noAttackOnThreat=	"true"
			noNavPaths=			"true"
			ignoreShieldsDown=	"true"
		/>
		
		<Communications>
			<Message name="Explore" key="E">
				<OnShow>
					(and (eq (objGetData gSource "behavior") 'escorting)
						(objGetProperty gSource 'playerWingman)
					)
				</OnShow>
				
				<Invoke>
					(block 
						(
							;	Look for the nearest unknown object
							
							(targetObj 
								(@
									(filter (sysFindObject gSource "Ts -uncharted; S:d;") theObj
										(and 
											(not (objIsKnown theObj))
											(objGetProperty theObj 'hasDockingPorts)
											(objCanAttack theObj)
										)
									)
									0
								)
							)
						)
						
						(switch
							;	If no unknown objects, then say so

							(not targetObj)
								(objSendMessage gSender gSource (objTranslate gSource 'NoExploreTarget))
							
							;	Otherwise, send the auton to the nearest object
							
							(block Nil
								(shpCancelOrders gSource)
								(shpOrder gSource 'approach targetObj 110)
								(objSetShowAsDestination gSource)
								
								(objSetData gSource 'behavior 'custom)
								(objSetData gSource 'targetID (objGetID targetObj))
								(objSendMessage gSender gSource (objTranslate gSource 'ExploreAck))
							)
						)
					)
				</Invoke>
			</Message>
			
			<Message name="Form up" key="F">
				<OnShow>
					(and
						(objGetProperty gSource 'playerWingman)
						(or (eq (objGetData gSource 'behavior) 'waiting)
							(eq (objGetData gSource 'behavior) 'custom)
							(objCommunicate gSource gSender 'QueryAttackStatus)
						)
					)
				</OnShow>

				<Invoke>
					(block (behavior)
						(setq behavior (objGetData gSource 'behavior))
						(switch
							(or (not behavior) (eq behavior 'escorting))
								(block Nil
									(objCommunicate gSource gSender 'FormUp)
									(objSendMessage gSender gSource (objTranslate gSource 'FormUpAck "\"Auton order acknowledged\""))
								)

							(block Nil
								(objClearShowAsDestination gSource)
								
								(shpCancelOrders gSource)
								(shpOrder gSource 'escort gPlayerShip)
								
								(objSetData gSource 'behavior 'escorting)
								(objSendMessage gSender gSource (objTranslate gSource 'FormUpAck "\"Auton order acknowledged\""))
							)
						)
					)
				</Invoke>
			</Message>
		</Communications>

		<Events>
			<OnOrdersCompleted>
				(block (behavior theTarget)
					(setq behavior (objGetData gSource 'behavior))
					
					(switch
						;	If we're exploring, then pick a new target
						
						(eq behavior 'custom)
							(block 
								(
									(exploredObj (objGetObjByID (objGetData gSource 'targetID)))
									
									;	Look for the nearest unknown object
							
									(targetObj 
										(@
											(filter (sysFindObject gSource "Ts -uncharted; S:d;") theObj
												(and (not (objIsKnown theObj))
														(objGetProperty theObj 'hasDockingPorts)
														(objCanAttack theObj)
												)
											)
											0
										)
									)
								)
								
								;	Explore object
								
								(if exploredObj
									(block Nil
										(objSetKnown exploredObj)
										(objSendMessage gSender gSource (objTranslate gSource 'ObjectExplored))
										
										(objClearShowAsDestination exploredObj)
									)
								)
								
								;	Pick a new target
								
								(switch
									;	If no unknown objects, then reconnaissance is done
									
									(not targetObj)
										(block Nil
											(shpOrder gSource 'escort gPlayerShip)
											(objClearShowAsDestination gSource)
								
											(objSetData gSource 'behavior 'escorting)
											(objSendMessage gSender gSource (objTranslate gSource 'ExplorationDone))
										)
											
									;	Otherwise, go to new object
									
									(block Nil
										(shpOrder gSource 'approach targetObj 110)
										(objSetData gSource 'targetID (objGetID targetObj))
									)
								)
							)

						;	Otherwise, let our base class handle it.
						
						(typFireEvent &baStdAutonBase; 'OnOrdersCompleted)
					)
				)
			</OnOrdersCompleted>
		</Events>
		
		<Language>
			<Text id="DeployAck">"\"mark III Phantom-class reconnaissance auton online\""</Text>
			<Text id="ExplorationDone">"\"Reconnaissance complete\""</Text>
			<Text id="ExploreAck">"\"Commencing reconnaissance\""</Text>
			<Text id="NoExploreTarget">"\"No unexplored objects in system.\""</Text>
			<Text id="ObjectExplored">
				(block ((exploredObj (objGetObjByID (objGetData gSource 'targetID))))
					
					(cat
						"\"" (objGetName exploredObj 0x01) " found\""
					)
				)
			</Text>
		</Language>
	</ShipClass>

<!--
Object				Level	Value	Mass	Frequency
300DDefender		4		2500	1000	rare
PlasteelPlate		4		400		3000	common
LaserCannon			1		250		1000	common
HullPlateIonizer	2		1500	1500	uncommon
MissileDefense		4		5000	1000	uncommon

MIVPhantomAuton		8		12000	10000	uncommon
1xHardStealthArmor	8		13000	5000	uncommon
MIIDRADISModule		7		21000	4500	veryrare
-->
	
	<!-- Auton, Mark IV Phantom -->

	<ShipClass UNID="&scCCMarkIVPhantomAuton;"
			manufacturer=		"CabbageCorp"
			class=				"mark IV Phantom"
			type=				"auton"

			attributes=			"auton, cabbageCorp, genericClass"
			inherit=			"&baStdAutonBase;"
			   
			mass=				"4"
			thrustRatio=		"9"
			maxSpeed=			"32"
			cargoSpace=			"0"

			reactorPower=		"2000"
			maxArmor=			"5000"
			maxDevices=			"2"
			maxWeapons=			"1"
			   
			leavesWreck=		"0"
	>

		<!-- Configuration -->
		
		<Armor
			armorID=			"&itCC1xAdvancedStealthArmor;"
			count=				"1"
			enhancement=		"0x0200"
		/>	;the enhancement is regeneration
		
		<Devices>
			<Device deviceID="&itCCMIIDRADISModule;"/>
		</Devices>

		<Maneuver
			maxRotationRate=	"15.0"
			rotationAccel=		"7.5"
		/>
		
		<!-- Image and Effects -->

		<Image imageID="&rsCCF120Phantom;" imageWidth="32" imageHeight="32" rotationCount="120" rotationColumns="12"/>

		<!-- AI and Behavior -->

		<AISettings
			fireRateAdj=		"20"
			fireAccuracy=		"90"
			perception=			"4"
			nonCombatant=		"true"
			noAttackOnThreat=	"true"
			noNavPaths=			"true"
			ignoreShieldsDown=	"true"
		/>
		
		<Communications>
			<Message name="Explore" key="E">
				<OnShow>
					(and (eq (objGetData gSource "behavior") 'escorting)
						(objGetProperty gSource 'playerWingman)
					)
				</OnShow>
				
				<Invoke>
					(block 
						(
							;	Look for the nearest unknown object
							
							(targetObj 
								(@
									(filter (sysFindObject gSource "Ts -uncharted; S:d;") theObj
										(and 
											(not (objIsKnown theObj))
											(objGetProperty theObj 'hasDockingPorts)
											(objCanAttack theObj)
										)
									)
									0
								)
							)
						)
						
						(switch
							;	If no unknown objects, then say so

							(not targetObj)
								(objSendMessage gSender gSource (objTranslate gSource 'NoExploreTarget))
							
							;	Otherwise, send the auton to the nearest object
							
							(block Nil
								(shpCancelOrders gSource)
								(shpOrder gSource 'approach targetObj 165)
								(objSetShowAsDestination gSource)
								
								(objSetData gSource 'behavior 'custom)
								(objSetData gSource 'targetID (objGetID targetObj))
								(objSendMessage gSender gSource (objTranslate gSource 'ExploreAck))
							)
						)
					)
				</Invoke>
			</Message>
			
			<Message name="Form up" key="F">
				<OnShow>
					(and
						(objGetProperty gSource 'playerWingman)
						(or (eq (objGetData gSource 'behavior) 'waiting)
							(eq (objGetData gSource 'behavior) 'custom)
							(objCommunicate gSource gSender 'QueryAttackStatus)
						)
					)
				</OnShow>

				<Invoke>
					(block (behavior)
						(setq behavior (objGetData gSource 'behavior))
						(switch
							(or (not behavior) (eq behavior 'escorting))
								(block Nil
									(objCommunicate gSource gSender 'FormUp)
									(objSendMessage gSender gSource (objTranslate gSource 'FormUpAck "\"Auton order acknowledged\""))
								)

							(block Nil
								(objClearShowAsDestination gSource)
								
								(shpCancelOrders gSource)
								(shpOrder gSource 'escort gPlayerShip)
								
								(objSetData gSource 'behavior 'escorting)
								(objSendMessage gSender gSource (objTranslate gSource 'FormUpAck "\"Auton order acknowledged\""))
							)
						)
					)
				</Invoke>
			</Message>
		</Communications>

		<Events>
			<OnOrdersCompleted>
				(block (behavior theTarget)
					(setq behavior (objGetData gSource 'behavior))
					
					(switch
						;	If we're exploring, then pick a new target
						
						(eq behavior 'custom)
							(block 
								(
									(exploredObj (objGetObjByID (objGetData gSource 'targetID)))
									
									;	Look for the nearest unknown object
							
									(targetObj 
										(@
											(filter (sysFindObject gSource "Ts -uncharted; S:d;") theObj
												(and (not (objIsKnown theObj))
														(objGetProperty theObj 'hasDockingPorts)
														(objCanAttack theObj)
												)
											)
											0
										)
									)
								)
								
								;	Explore object
								
								(if exploredObj
									(block Nil
										(objSetKnown exploredObj)
										(objSendMessage gSender gSource (objTranslate gSource 'ObjectExplored))
										
										(objClearShowAsDestination exploredObj)
									)
								)
								
								;	Pick a new target
								
								(switch
									;	If no unknown objects, then reconnaissance is done
									
									(not targetObj)
										(block Nil
											(shpOrder gSource 'escort gPlayerShip)
											(objClearShowAsDestination gSource)
								
											(objSetData gSource 'behavior 'escorting)
											(objSendMessage gSender gSource (objTranslate gSource 'ExplorationDone))
										)
											
									;	Otherwise, go to new object
									
									(block Nil
										(shpOrder gSource 'approach targetObj 165)
										(objSetData gSource 'targetID (objGetID targetObj))
									)
								)
							)

						;	Otherwise, let our base class handle it.
						
						(typFireEvent &baStdAutonBase; 'OnOrdersCompleted)
					)
				)
			</OnOrdersCompleted>
		</Events>
		
		<Language>
			<Text id="DeployAck">"\"mark IV Phantom-class reconnaissance auton online\""</Text>
			<Text id="ExplorationDone">"\"Reconnaissance complete\""</Text>
			<Text id="ExploreAck">"\"Commencing reconnaissance\""</Text>
			<Text id="NoExploreTarget">"\"No unexplored objects in system.\""</Text>
			<Text id="ObjectExplored">
				(block ((exploredObj (objGetObjByID (objGetData gSource 'targetID))))
					
					(cat
						"\"" (objGetName exploredObj 0x01) " found\""
					)
				)
			</Text>
		</Language>
	</ShipClass>

<!--
Object				Level	Value	Mass	Frequency
300DDefender		4		2500	1000	rare
PlasteelPlate		4		400		3000	common
LaserCannon			1		250		1000	common
HullPlateIonizer	2		1500	1500	uncommon
MissileDefense		4		5000	1000	uncommon

MVPhantomAuton		10		150000	10000	uncommon
1xExpStealthArmor	10		50000	5000	uncommon
MIIIDRADISModule	9		80000	4500	veryrare
-->
	
	<!-- Auton, Mark V Phantom -->

	<ShipClass UNID="&scCCMarkVPhantomAuton;"
			manufacturer=		"CabbageCorp"
			class=				"mark V Phantom"
			type=				"auton"

			attributes=			"auton, cabbageCorp, genericClass"
			inherit=			"&baStdAutonBase;"
			   
			mass=				"5"
			thrustRatio=		"10"
			maxSpeed=			"35"
			cargoSpace=			"0"

			reactorPower=		"2000"
			maxArmor=			"5000"
			maxDevices=			"2"
			maxWeapons=			"1"
			   
			leavesWreck=		"0"
	>

		<!-- Configuration -->
		
		<Armor
			armorID=			"&itCC1xExperimentalStealthArmor;"
			count=				"1"
			enhancement=		"0x0200"
		/>	;the enhancement is regeneration
		
		<Devices>
			<Device deviceID="&itCCMIIIDRADISModule;"/>
		</Devices>

		<Maneuver
			maxRotationRate=	"18.0"
			rotationAccel=		"9.0"
		/>
		
		<!-- Image and Effects -->

		<Image imageID="&rsCCF120Phantom;" imageWidth="32" imageHeight="32" rotationCount="120" rotationColumns="12"/>

		<!-- AI and Behavior -->

		<AISettings
			fireRateAdj=		"20"
			fireAccuracy=		"90"
			perception=			"4"
			nonCombatant=		"true"
			noAttackOnThreat=	"true"
			noNavPaths=			"true"
			ignoreShieldsDown=	"true"
		/>
		
		<Communications>
			<Message name="Explore" key="E">
				<OnShow>
					(and (eq (objGetData gSource "behavior") 'escorting)
						(objGetProperty gSource 'playerWingman)
					)
				</OnShow>
				
				<Invoke>
					(block 
						(
							;	Look for the nearest unknown object
							
							(targetObj 
								(@
									(filter (sysFindObject gSource "Ts -uncharted; S:d;") theObj
										(and 
											(not (objIsKnown theObj))
											(objGetProperty theObj 'hasDockingPorts)
											(objCanAttack theObj)
										)
									)
									0
								)
							)
						)
						
						(switch
							;	If no unknown objects, then say so

							(not targetObj)
								(objSendMessage gSender gSource (objTranslate gSource 'NoExploreTarget))
							
							;	Otherwise, send the auton to the nearest object
							
							(block Nil
								(shpCancelOrders gSource)
								(shpOrder gSource 'approach targetObj 250)
								(objSetShowAsDestination gSource)
								
								(objSetData gSource 'behavior 'custom)
								(objSetData gSource 'targetID (objGetID targetObj))
								(objSendMessage gSender gSource (objTranslate gSource 'ExploreAck))
							)
						)
					)
				</Invoke>
			</Message>
			
			<Message name="Form up" key="F">
				<OnShow>
					(and
						(objGetProperty gSource 'playerWingman)
						(or (eq (objGetData gSource 'behavior) 'waiting)
							(eq (objGetData gSource 'behavior) 'custom)
							(objCommunicate gSource gSender 'QueryAttackStatus)
						)
					)
				</OnShow>

				<Invoke>
					(block (behavior)
						(setq behavior (objGetData gSource 'behavior))
						(switch
							(or (not behavior) (eq behavior 'escorting))
								(block Nil
									(objCommunicate gSource gSender 'FormUp)
									(objSendMessage gSender gSource (objTranslate gSource 'FormUpAck "\"Auton order acknowledged\""))
								)

							(block Nil
								(objClearShowAsDestination gSource)
								
								(shpCancelOrders gSource)
								(shpOrder gSource 'escort gPlayerShip)
								
								(objSetData gSource 'behavior 'escorting)
								(objSendMessage gSender gSource (objTranslate gSource 'FormUpAck "\"Auton order acknowledged\""))
							)
						)
					)
				</Invoke>
			</Message>
		</Communications>

		<Events>
			<OnOrdersCompleted>
				(block (behavior theTarget)
					(setq behavior (objGetData gSource 'behavior))
					
					(switch
						;	If we're exploring, then pick a new target
						
						(eq behavior 'custom)
							(block 
								(
									(exploredObj (objGetObjByID (objGetData gSource 'targetID)))
									
									;	Look for the nearest unknown object
							
									(targetObj 
										(@
											(filter (sysFindObject gSource "Ts -uncharted; S:d;") theObj
												(and (not (objIsKnown theObj))
														(objGetProperty theObj 'hasDockingPorts)
														(objCanAttack theObj)
												)
											)
											0
										)
									)
								)
								
								;	Explore object
								
								(if exploredObj
									(block Nil
										(objSetKnown exploredObj)
										(objSendMessage gSender gSource (objTranslate gSource 'ObjectExplored))
										
										(objClearShowAsDestination exploredObj)
									)
								)
								
								;	Pick a new target
								
								(switch
									;	If no unknown objects, then reconnaissance is done
									
									(not targetObj)
										(block Nil
											(shpOrder gSource 'escort gPlayerShip)
											(objClearShowAsDestination gSource)
								
											(objSetData gSource 'behavior 'escorting)
											(objSendMessage gSender gSource (objTranslate gSource 'ExplorationDone))
										)
											
									;	Otherwise, go to new object
									
									(block Nil
										(shpOrder gSource 'approach targetObj 250)
										(objSetData gSource 'targetID (objGetID targetObj))
									)
								)
							)

						;	Otherwise, let our base class handle it.
						
						(typFireEvent &baStdAutonBase; 'OnOrdersCompleted)
					)
				)
			</OnOrdersCompleted>
		</Events>
		
		<Language>
			<Text id="DeployAck">"\"mark V Phantom-class reconnaissance auton online\""</Text>
			<Text id="ExplorationDone">"\"Reconnaissance complete\""</Text>
			<Text id="ExploreAck">"\"Commencing reconnaissance\""</Text>
			<Text id="NoExploreTarget">"\"No unexplored objects in system.\""</Text>
			<Text id="ObjectExplored">
				(block ((exploredObj (objGetObjByID (objGetData gSource 'targetID))))
					
					(cat
						"\"" (objGetName exploredObj 0x01) " found\""
					)
				)
			</Text>
		</Language>
	</ShipClass>

<!-- ITEMS -->

	<!-- Auton, Mark I Phantom -->

	<ItemType UNID="&itCCMarkIPhantomAuton;"
			name=				"mark I Phantom auton"
			attributes=			"auton, cabbageCorp, minorItem"
			  
			level=				"2"
			frequency=			"rare"
			unknownType=		"&itUnknownAuton;"
			  
			value=				"240"
			mass=				"1500"
			charges=			"0"
			massBonusPerCharge=	"1000"

			description=		"This auton is programmed to explore and document all unknown objects of interest in any given star system. By deploying this auton you are agreeing to return legal ownership of this auton and all information discovered by this auton to Cabbage Corp in exchange for limited access to said information."
	>

		<Image imageID="&rsCCShipIcons;" imageX="288" imageY="0" imageWidth="96" imageHeight="96"/>

		<Invoke key="A">
			(rpgDeployAutonFromItem gSource (itmGetStaticData gItem 'autonShipClass) gItem)
		</Invoke>
		
		<StaticData>
			<AutonShipClass>&scCCMarkIPhantomAuton;</AutonShipClass>
		</StaticData>
	</ItemType>

	<!-- Auton, Mark II Phantom -->

	<ItemType UNID="&itCCMarkIIPhantomAuton;"
			name=				"mark II Phantom auton"
			attributes=			"auton, cabbageCorp, minorItem"
			  
			level=				"4"
			frequency=			"veryrare"
			unknownType=		"&itUnknownAuton;"
			  
			value=				"1500"
			mass=				"3500"
			charges=			"0"
			massBonusPerCharge=	"1000"

			description=		"This auton is programmed to explore and document all unknown objects of interest in any given star system. By deploying this auton you are agreeing to return legal ownership of this auton and all information discovered by this auton to Cabbage Corp in exchange for limited access to said information."
	>

		<Image imageID="&rsCCShipIcons;" imageX="288" imageY="0" imageWidth="96" imageHeight="96"/>

		<Invoke key="A">
			(rpgDeployAutonFromItem gSource (itmGetStaticData gItem 'autonShipClass) gItem)
		</Invoke>
		
		<StaticData>
			<AutonShipClass>&scCCMarkIIPhantomAuton;</AutonShipClass>
		</StaticData>
	</ItemType>

	<!-- Auton, Mark III Phantom -->

	<ItemType UNID="&itCCMarkIIIPhantomAuton;"
			name=				"mark III Phantom auton"
			attributes=			"auton, cabbageCorp, minorItem"
			  
			level=				"6"
			frequency=			"veryrare"
			unknownType=		"&itUnknownAuton;"
			  
			value=				"10000"
			mass=				"4500"
			charges=			"0"
			massBonusPerCharge=	"1000"

			description=		"This auton is programmed to explore and document all unknown objects of interest in any given star system. By deploying this auton you are agreeing to return legal ownership of this auton and all information discovered by this auton to Cabbage Corp in exchange for limited access to said information."
	>

		<Image imageID="&rsCCShipIcons;" imageX="288" imageY="0" imageWidth="96" imageHeight="96"/>

		<Invoke key="A">
			(rpgDeployAutonFromItem gSource (itmGetStaticData gItem 'autonShipClass) gItem)
		</Invoke>
		
		<StaticData>
			<AutonShipClass>&scCCMarkIIIPhantomAuton;</AutonShipClass>
		</StaticData>
	</ItemType>

	<!-- Auton, Mark IV Phantom -->

	<ItemType UNID="&itCCMarkIVPhantomAuton;"
			name=				"mark IV Phantom auton"
			attributes=			"auton, cabbageCorp, minorItem"
			  
			level=				"8"
			frequency=			"veryrare"
			  
			value=				"45000"
			mass=				"5500"
			charges=			"0"
			massBonusPerCharge=	"1000"

			description=		"This auton is programmed to explore and document all unknown objects of interest in any given star system. By deploying this auton you are agreeing to return legal ownership of this auton and all information discovered by this auton to Cabbage Corp in exchange for limited access to said information."
	>

		<Image imageID="&rsCCShipIcons;" imageX="288" imageY="0" imageWidth="96" imageHeight="96"/>

		<Invoke key="A">
			(rpgDeployAutonFromItem gSource (itmGetStaticData gItem 'autonShipClass) gItem)
		</Invoke>
		
		<StaticData>
			<AutonShipClass>&scCCMarkIVPhantomAuton;</AutonShipClass>
		</StaticData>
	</ItemType>

	<!-- Auton, Mark V Phantom -->

	<ItemType UNID="&itCCMarkVPhantomAuton;"
			name=				"mark V Phantom auton"
			attributes=			"auton, cabbageCorp, minorItem"
			  
			level=				"10"
			frequency=			"veryrare"
			  
			value=				"150000"
			mass=				"6000"
			charges=			"0"
			massBonusPerCharge=	"1000"

			description=		"This auton is programmed to explore and document all unknown objects of interest in any given star system. By deploying this auton you are agreeing to return legal ownership of this auton and all information discovered by this auton to Cabbage Corp in exchange for limited access to said information."
	>

		<Image imageID="&rsCCShipIcons;" imageX="288" imageY="0" imageWidth="96" imageHeight="96"/>

		<Invoke key="A">
			(rpgDeployAutonFromItem gSource (itmGetStaticData gItem 'autonShipClass) gItem)
		</Invoke>
		
		<StaticData>
			<AutonShipClass>&scCCMarkVPhantomAuton;</AutonShipClass>
		</StaticData>
	</ItemType>
	
</TranscendenceModule>